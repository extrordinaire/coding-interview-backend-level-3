{"version":3,"file":"dev.mjs","sources":["../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/entity.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/logger.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/query-promise.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/column.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/column-builder.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/table.utils.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/foreign-keys.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/tracing-utils.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/unique-constraint.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/utils/array.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/common.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/enum.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/subquery.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/tracing.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/view-common.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/table.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/sql/sql.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/alias.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/selection-proxy.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/utils.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/delete.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/casing.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/errors.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/int.common.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/bigint.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/bigserial.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/boolean.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/char.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/cidr.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/custom.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/date.common.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/date.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/double-precision.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/inet.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/integer.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/interval.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/json.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/jsonb.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/line.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/macaddr.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/macaddr8.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/numeric.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/point.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/postgis_extension/utils.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/postgis_extension/geometry.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/real.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/serial.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/smallint.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/smallserial.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/text.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/time.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/timestamp.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/uuid.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/varchar.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/vector_extension/bit.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/vector_extension/halfvec.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/vector_extension/sparsevec.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/vector_extension/vector.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/columns/all.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/table.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/primary-keys.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/sql/expressions/conditions.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/sql/expressions/select.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/relations.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/view-base.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/dialect.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/query-builders/query-builder.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/select.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/query-builder.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/insert.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/refresh-materialized-view.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/update.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/count.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/query.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/query-builders/raw.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/db.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/pg-core/session.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/postgres-js/session.js","../node_modules/.pnpm/drizzle-orm@0.43.1_better-sqlite3@11.9.1_postgres@3.4.5_sqlite3@5.1.7/node_modules/drizzle-orm/postgres-js/driver.js","../node_modules/.pnpm/drizzle-kit@0.31.0/node_modules/drizzle-kit/index.mjs","../src/parsed_env.ts","../drizzle.config.ts","../src/db/index.ts","../src/db/schema.ts","../src/lib/wrapped.ts","../src/routes.ts","../src/lib/format_zod_error.ts","../src/plugins/zod-validator.ts","../src/server.ts","../src/index.ts"],"sourcesContent":["const entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n  if (value instanceof type) {\n    return true;\n  }\n  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n    throw new Error(\n      `Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`\n    );\n  }\n  let cls = Object.getPrototypeOf(value).constructor;\n  if (cls) {\n    while (cls) {\n      if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n        return true;\n      }\n      cls = Object.getPrototypeOf(cls);\n    }\n  }\n  return false;\n}\nexport {\n  entityKind,\n  hasOwnEntityKind,\n  is\n};\n//# sourceMappingURL=entity.js.map","import { entityKind } from \"./entity.js\";\nclass ConsoleLogWriter {\n  static [entityKind] = \"ConsoleLogWriter\";\n  write(message) {\n    console.log(message);\n  }\n}\nclass DefaultLogger {\n  static [entityKind] = \"DefaultLogger\";\n  writer;\n  constructor(config) {\n    this.writer = config?.writer ?? new ConsoleLogWriter();\n  }\n  logQuery(query, params) {\n    const stringifiedParams = params.map((p) => {\n      try {\n        return JSON.stringify(p);\n      } catch {\n        return String(p);\n      }\n    });\n    const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n    this.writer.write(`Query: ${query}${paramsStr}`);\n  }\n}\nclass NoopLogger {\n  static [entityKind] = \"NoopLogger\";\n  logQuery() {\n  }\n}\nexport {\n  ConsoleLogWriter,\n  DefaultLogger,\n  NoopLogger\n};\n//# sourceMappingURL=logger.js.map","import { entityKind } from \"./entity.js\";\nclass QueryPromise {\n  static [entityKind] = \"QueryPromise\";\n  [Symbol.toStringTag] = \"QueryPromise\";\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n  then(onFulfilled, onRejected) {\n    return this.execute().then(onFulfilled, onRejected);\n  }\n}\nexport {\n  QueryPromise\n};\n//# sourceMappingURL=query-promise.js.map","import { entityKind } from \"./entity.js\";\nclass Column {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n    this.name = config.name;\n    this.keyAsName = config.keyAsName;\n    this.notNull = config.notNull;\n    this.default = config.default;\n    this.defaultFn = config.defaultFn;\n    this.onUpdateFn = config.onUpdateFn;\n    this.hasDefault = config.hasDefault;\n    this.primary = config.primaryKey;\n    this.isUnique = config.isUnique;\n    this.uniqueName = config.uniqueName;\n    this.uniqueType = config.uniqueType;\n    this.dataType = config.dataType;\n    this.columnType = config.columnType;\n    this.generated = config.generated;\n    this.generatedIdentity = config.generatedIdentity;\n  }\n  static [entityKind] = \"Column\";\n  name;\n  keyAsName;\n  primary;\n  notNull;\n  default;\n  defaultFn;\n  onUpdateFn;\n  hasDefault;\n  isUnique;\n  uniqueName;\n  uniqueType;\n  dataType;\n  columnType;\n  enumValues = void 0;\n  generated = void 0;\n  generatedIdentity = void 0;\n  config;\n  mapFromDriverValue(value) {\n    return value;\n  }\n  mapToDriverValue(value) {\n    return value;\n  }\n  // ** @internal */\n  shouldDisableInsert() {\n    return this.config.generated !== void 0 && this.config.generated.type !== \"byDefault\";\n  }\n}\nexport {\n  Column\n};\n//# sourceMappingURL=column.js.map","import { entityKind } from \"./entity.js\";\nclass ColumnBuilder {\n  static [entityKind] = \"ColumnBuilder\";\n  config;\n  constructor(name, dataType, columnType) {\n    this.config = {\n      name,\n      keyAsName: name === \"\",\n      notNull: false,\n      default: void 0,\n      hasDefault: false,\n      primaryKey: false,\n      isUnique: false,\n      uniqueName: void 0,\n      uniqueType: void 0,\n      dataType,\n      columnType,\n      generated: void 0\n    };\n  }\n  /**\n   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n   *\n   * @example\n   * ```ts\n   * const users = pgTable('users', {\n   * \tid: integer('id').$type<UserId>().primaryKey(),\n   * \tdetails: json('details').$type<UserDetails>().notNull(),\n   * });\n   * ```\n   */\n  $type() {\n    return this;\n  }\n  /**\n   * Adds a `not null` clause to the column definition.\n   *\n   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n   */\n  notNull() {\n    this.config.notNull = true;\n    return this;\n  }\n  /**\n   * Adds a `default <value>` clause to the column definition.\n   *\n   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n   *\n   * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n   */\n  default(value) {\n    this.config.default = value;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Adds a dynamic default value to the column.\n   * The function will be called when the row is inserted, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $defaultFn(fn) {\n    this.config.defaultFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $defaultFn}.\n   */\n  $default = this.$defaultFn;\n  /**\n   * Adds a dynamic update value to the column.\n   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $onUpdateFn(fn) {\n    this.config.onUpdateFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $onUpdateFn}.\n   */\n  $onUpdate = this.$onUpdateFn;\n  /**\n   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n   *\n   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n   */\n  primaryKey() {\n    this.config.primaryKey = true;\n    this.config.notNull = true;\n    return this;\n  }\n  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n  setName(name) {\n    if (this.config.name !== \"\")\n      return;\n    this.config.name = name;\n  }\n}\nexport {\n  ColumnBuilder\n};\n//# sourceMappingURL=column-builder.js.map","const TableName = Symbol.for(\"drizzle:Name\");\nexport {\n  TableName\n};\n//# sourceMappingURL=table.utils.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nclass ForeignKeyBuilder {\n  static [entityKind] = \"PgForeignKeyBuilder\";\n  /** @internal */\n  reference;\n  /** @internal */\n  _onUpdate = \"no action\";\n  /** @internal */\n  _onDelete = \"no action\";\n  constructor(config, actions) {\n    this.reference = () => {\n      const { name, columns, foreignColumns } = config();\n      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };\n    };\n    if (actions) {\n      this._onUpdate = actions.onUpdate;\n      this._onDelete = actions.onDelete;\n    }\n  }\n  onUpdate(action) {\n    this._onUpdate = action === void 0 ? \"no action\" : action;\n    return this;\n  }\n  onDelete(action) {\n    this._onDelete = action === void 0 ? \"no action\" : action;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new ForeignKey(table, this);\n  }\n}\nclass ForeignKey {\n  constructor(table, builder) {\n    this.table = table;\n    this.reference = builder.reference;\n    this.onUpdate = builder._onUpdate;\n    this.onDelete = builder._onDelete;\n  }\n  static [entityKind] = \"PgForeignKey\";\n  reference;\n  onUpdate;\n  onDelete;\n  getName() {\n    const { name, columns, foreignColumns } = this.reference();\n    const columnNames = columns.map((column) => column.name);\n    const foreignColumnNames = foreignColumns.map((column) => column.name);\n    const chunks = [\n      this.table[TableName],\n      ...columnNames,\n      foreignColumns[0].table[TableName],\n      ...foreignColumnNames\n    ];\n    return name ?? `${chunks.join(\"_\")}_fk`;\n  }\n}\nfunction foreignKey(config) {\n  function mappedConfig() {\n    const { name, columns, foreignColumns } = config;\n    return {\n      name,\n      columns,\n      foreignColumns\n    };\n  }\n  return new ForeignKeyBuilder(mappedConfig);\n}\nexport {\n  ForeignKey,\n  ForeignKeyBuilder,\n  foreignKey\n};\n//# sourceMappingURL=foreign-keys.js.map","function iife(fn, ...args) {\n  return fn(...args);\n}\nexport {\n  iife\n};\n//# sourceMappingURL=tracing-utils.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nfunction unique(name) {\n  return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n  return `${table[TableName]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n  constructor(columns, name) {\n    this.name = name;\n    this.columns = columns;\n  }\n  static [entityKind] = \"PgUniqueConstraintBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  nullsNotDistinctConfig = false;\n  nullsNotDistinct() {\n    this.nullsNotDistinctConfig = true;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n  }\n}\nclass UniqueOnConstraintBuilder {\n  static [entityKind] = \"PgUniqueOnConstraintBuilder\";\n  /** @internal */\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n  on(...columns) {\n    return new UniqueConstraintBuilder(columns, this.name);\n  }\n}\nclass UniqueConstraint {\n  constructor(table, columns, nullsNotDistinct, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n    this.nullsNotDistinct = nullsNotDistinct;\n  }\n  static [entityKind] = \"PgUniqueConstraint\";\n  columns;\n  name;\n  nullsNotDistinct = false;\n  getName() {\n    return this.name;\n  }\n}\nexport {\n  UniqueConstraint,\n  UniqueConstraintBuilder,\n  UniqueOnConstraintBuilder,\n  unique,\n  uniqueKeyName\n};\n//# sourceMappingURL=unique-constraint.js.map","function parsePgArrayValue(arrayString, startFrom, inQuotes) {\n  for (let i = startFrom; i < arrayString.length; i++) {\n    const char = arrayString[i];\n    if (char === \"\\\\\") {\n      i++;\n      continue;\n    }\n    if (char === '\"') {\n      return [arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"), i + 1];\n    }\n    if (inQuotes) {\n      continue;\n    }\n    if (char === \",\" || char === \"}\") {\n      return [arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"), i];\n    }\n  }\n  return [arrayString.slice(startFrom).replace(/\\\\/g, \"\"), arrayString.length];\n}\nfunction parsePgNestedArray(arrayString, startFrom = 0) {\n  const result = [];\n  let i = startFrom;\n  let lastCharIsComma = false;\n  while (i < arrayString.length) {\n    const char = arrayString[i];\n    if (char === \",\") {\n      if (lastCharIsComma || i === startFrom) {\n        result.push(\"\");\n      }\n      lastCharIsComma = true;\n      i++;\n      continue;\n    }\n    lastCharIsComma = false;\n    if (char === \"\\\\\") {\n      i += 2;\n      continue;\n    }\n    if (char === '\"') {\n      const [value2, startFrom2] = parsePgArrayValue(arrayString, i + 1, true);\n      result.push(value2);\n      i = startFrom2;\n      continue;\n    }\n    if (char === \"}\") {\n      return [result, i + 1];\n    }\n    if (char === \"{\") {\n      const [value2, startFrom2] = parsePgNestedArray(arrayString, i + 1);\n      result.push(value2);\n      i = startFrom2;\n      continue;\n    }\n    const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n    result.push(value);\n    i = newStartFrom;\n  }\n  return [result, i];\n}\nfunction parsePgArray(arrayString) {\n  const [result] = parsePgNestedArray(arrayString, 1);\n  return result;\n}\nfunction makePgArray(array) {\n  return `{${array.map((item) => {\n    if (Array.isArray(item)) {\n      return makePgArray(item);\n    }\n    if (typeof item === \"string\") {\n      return `\"${item.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"')}\"`;\n    }\n    return `${item}`;\n  }).join(\",\")}}`;\n}\nexport {\n  makePgArray,\n  parsePgArray,\n  parsePgNestedArray\n};\n//# sourceMappingURL=array.js.map","import { ColumnBuilder } from \"../../column-builder.js\";\nimport { Column } from \"../../column.js\";\nimport { entityKind, is } from \"../../entity.js\";\nimport { ForeignKeyBuilder } from \"../foreign-keys.js\";\nimport { iife } from \"../../tracing-utils.js\";\nimport { uniqueKeyName } from \"../unique-constraint.js\";\nimport { makePgArray, parsePgArray } from \"../utils/array.js\";\nclass PgColumnBuilder extends ColumnBuilder {\n  foreignKeyConfigs = [];\n  static [entityKind] = \"PgColumnBuilder\";\n  array(size) {\n    return new PgArrayBuilder(this.config.name, this, size);\n  }\n  references(ref, actions = {}) {\n    this.foreignKeyConfigs.push({ ref, actions });\n    return this;\n  }\n  unique(name, config) {\n    this.config.isUnique = true;\n    this.config.uniqueName = name;\n    this.config.uniqueType = config?.nulls;\n    return this;\n  }\n  generatedAlwaysAs(as) {\n    this.config.generated = {\n      as,\n      type: \"always\",\n      mode: \"stored\"\n    };\n    return this;\n  }\n  /** @internal */\n  buildForeignKeys(column, table) {\n    return this.foreignKeyConfigs.map(({ ref, actions }) => {\n      return iife(\n        (ref2, actions2) => {\n          const builder = new ForeignKeyBuilder(() => {\n            const foreignColumn = ref2();\n            return { columns: [column], foreignColumns: [foreignColumn] };\n          });\n          if (actions2.onUpdate) {\n            builder.onUpdate(actions2.onUpdate);\n          }\n          if (actions2.onDelete) {\n            builder.onDelete(actions2.onDelete);\n          }\n          return builder.build(table);\n        },\n        ref,\n        actions\n      );\n    });\n  }\n  /** @internal */\n  buildExtraConfigColumn(table) {\n    return new ExtraConfigColumn(table, this.config);\n  }\n}\nclass PgColumn extends Column {\n  constructor(table, config) {\n    if (!config.uniqueName) {\n      config.uniqueName = uniqueKeyName(table, [config.name]);\n    }\n    super(table, config);\n    this.table = table;\n  }\n  static [entityKind] = \"PgColumn\";\n}\nclass ExtraConfigColumn extends PgColumn {\n  static [entityKind] = \"ExtraConfigColumn\";\n  getSQLType() {\n    return this.getSQLType();\n  }\n  indexConfig = {\n    order: this.config.order ?? \"asc\",\n    nulls: this.config.nulls ?? \"last\",\n    opClass: this.config.opClass\n  };\n  defaultConfig = {\n    order: \"asc\",\n    nulls: \"last\",\n    opClass: void 0\n  };\n  asc() {\n    this.indexConfig.order = \"asc\";\n    return this;\n  }\n  desc() {\n    this.indexConfig.order = \"desc\";\n    return this;\n  }\n  nullsFirst() {\n    this.indexConfig.nulls = \"first\";\n    return this;\n  }\n  nullsLast() {\n    this.indexConfig.nulls = \"last\";\n    return this;\n  }\n  /**\n   * ### PostgreSQL documentation quote\n   *\n   * > An operator class with optional parameters can be specified for each column of an index.\n   * The operator class identifies the operators to be used by the index for that column.\n   * For example, a B-tree index on four-byte integers would use the int4_ops class;\n   * this operator class includes comparison functions for four-byte integers.\n   * In practice the default operator class for the column's data type is usually sufficient.\n   * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n   * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n   * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n   * More information about operator classes check:\n   *\n   * ### Useful links\n   * https://www.postgresql.org/docs/current/sql-createindex.html\n   *\n   * https://www.postgresql.org/docs/current/indexes-opclass.html\n   *\n   * https://www.postgresql.org/docs/current/xindex.html\n   *\n   * ### Additional types\n   * If you have the `pg_vector` extension installed in your database, you can use the\n   * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n   *\n   * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n   *\n   * @param opClass\n   * @returns\n   */\n  op(opClass) {\n    this.indexConfig.opClass = opClass;\n    return this;\n  }\n}\nclass IndexedColumn {\n  static [entityKind] = \"IndexedColumn\";\n  constructor(name, keyAsName, type, indexConfig) {\n    this.name = name;\n    this.keyAsName = keyAsName;\n    this.type = type;\n    this.indexConfig = indexConfig;\n  }\n  name;\n  keyAsName;\n  type;\n  indexConfig;\n}\nclass PgArrayBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgArrayBuilder\";\n  constructor(name, baseBuilder, size) {\n    super(name, \"array\", \"PgArray\");\n    this.config.baseBuilder = baseBuilder;\n    this.config.size = size;\n  }\n  /** @internal */\n  build(table) {\n    const baseColumn = this.config.baseBuilder.build(table);\n    return new PgArray(\n      table,\n      this.config,\n      baseColumn\n    );\n  }\n}\nclass PgArray extends PgColumn {\n  constructor(table, config, baseColumn, range) {\n    super(table, config);\n    this.baseColumn = baseColumn;\n    this.range = range;\n    this.size = config.size;\n  }\n  size;\n  static [entityKind] = \"PgArray\";\n  getSQLType() {\n    return `${this.baseColumn.getSQLType()}[${typeof this.size === \"number\" ? this.size : \"\"}]`;\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      value = parsePgArray(value);\n    }\n    return value.map((v) => this.baseColumn.mapFromDriverValue(v));\n  }\n  mapToDriverValue(value, isNestedArray = false) {\n    const a = value.map(\n      (v) => v === null ? null : is(this.baseColumn, PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)\n    );\n    if (isNestedArray)\n      return a;\n    return makePgArray(a);\n  }\n}\nexport {\n  ExtraConfigColumn,\n  IndexedColumn,\n  PgArray,\n  PgArrayBuilder,\n  PgColumn,\n  PgColumnBuilder\n};\n//# sourceMappingURL=common.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgEnumObjectColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumObjectColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumObjectColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumObjectColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumObjectColumn extends PgColumn {\n  static [entityKind] = \"PgEnumObjectColumn\";\n  enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nconst isPgEnumSym = Symbol.for(\"drizzle:isPgEnum\");\nfunction isPgEnum(obj) {\n  return !!obj && typeof obj === \"function\" && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\nclass PgEnumColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumColumn extends PgColumn {\n  static [entityKind] = \"PgEnumColumn\";\n  enum = this.config.enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nfunction pgEnum(enumName, input) {\n  return Array.isArray(input) ? pgEnumWithSchema(enumName, [...input], void 0) : pgEnumObjectWithSchema(enumName, input, void 0);\n}\nfunction pgEnumWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: values,\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nfunction pgEnumObjectWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumObjectColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: Object.values(values),\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nexport {\n  PgEnumColumn,\n  PgEnumColumnBuilder,\n  PgEnumObjectColumn,\n  PgEnumObjectColumnBuilder,\n  isPgEnum,\n  pgEnum,\n  pgEnumObjectWithSchema,\n  pgEnumWithSchema\n};\n//# sourceMappingURL=enum.js.map","import { entityKind } from \"./entity.js\";\nclass Subquery {\n  static [entityKind] = \"Subquery\";\n  constructor(sql, selection, alias, isWith = false) {\n    this._ = {\n      brand: \"Subquery\",\n      sql,\n      selectedFields: selection,\n      alias,\n      isWith\n    };\n  }\n  // getSQL(): SQL<unknown> {\n  // \treturn new SQL([this]);\n  // }\n}\nclass WithSubquery extends Subquery {\n  static [entityKind] = \"WithSubquery\";\n}\nexport {\n  Subquery,\n  WithSubquery\n};\n//# sourceMappingURL=subquery.js.map","import { iife } from \"./tracing-utils.js\";\nimport { npmVersion } from \"./version.js\";\nlet otel;\nlet rawTracer;\nconst tracer = {\n  startActiveSpan(name, fn) {\n    if (!otel) {\n      return fn();\n    }\n    if (!rawTracer) {\n      rawTracer = otel.trace.getTracer(\"drizzle-orm\", npmVersion);\n    }\n    return iife(\n      (otel2, rawTracer2) => rawTracer2.startActiveSpan(\n        name,\n        (span) => {\n          try {\n            return fn(span);\n          } catch (e) {\n            span.setStatus({\n              code: otel2.SpanStatusCode.ERROR,\n              message: e instanceof Error ? e.message : \"Unknown error\"\n              // eslint-disable-line no-instanceof/no-instanceof\n            });\n            throw e;\n          } finally {\n            span.end();\n          }\n        }\n      ),\n      otel,\n      rawTracer\n    );\n  }\n};\nexport {\n  tracer\n};\n//# sourceMappingURL=tracing.js.map","const ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nexport {\n  ViewBaseConfig\n};\n//# sourceMappingURL=view-common.js.map","import { entityKind } from \"./entity.js\";\nimport { TableName } from \"./table.utils.js\";\nconst Schema = Symbol.for(\"drizzle:Schema\");\nconst Columns = Symbol.for(\"drizzle:Columns\");\nconst ExtraConfigColumns = Symbol.for(\"drizzle:ExtraConfigColumns\");\nconst OriginalName = Symbol.for(\"drizzle:OriginalName\");\nconst BaseName = Symbol.for(\"drizzle:BaseName\");\nconst IsAlias = Symbol.for(\"drizzle:IsAlias\");\nconst ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n  static [entityKind] = \"Table\";\n  /** @internal */\n  static Symbol = {\n    Name: TableName,\n    Schema,\n    OriginalName,\n    Columns,\n    ExtraConfigColumns,\n    BaseName,\n    IsAlias,\n    ExtraConfigBuilder\n  };\n  /**\n   * @internal\n   * Can be changed if the table is aliased.\n   */\n  [TableName];\n  /**\n   * @internal\n   * Used to store the original name of the table, before any aliasing.\n   */\n  [OriginalName];\n  /** @internal */\n  [Schema];\n  /** @internal */\n  [Columns];\n  /** @internal */\n  [ExtraConfigColumns];\n  /**\n   *  @internal\n   * Used to store the table name before the transformation via the `tableCreator` functions.\n   */\n  [BaseName];\n  /** @internal */\n  [IsAlias] = false;\n  /** @internal */\n  [IsDrizzleTable] = true;\n  /** @internal */\n  [ExtraConfigBuilder] = void 0;\n  constructor(name, schema, baseName) {\n    this[TableName] = this[OriginalName] = name;\n    this[Schema] = schema;\n    this[BaseName] = baseName;\n  }\n}\nfunction isTable(table) {\n  return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n  return table[TableName];\n}\nfunction getTableUniqueName(table) {\n  return `${table[Schema] ?? \"public\"}.${table[TableName]}`;\n}\nexport {\n  BaseName,\n  Columns,\n  ExtraConfigBuilder,\n  ExtraConfigColumns,\n  IsAlias,\n  OriginalName,\n  Schema,\n  Table,\n  getTableName,\n  getTableUniqueName,\n  isTable\n};\n//# sourceMappingURL=table.js.map","import { entityKind, is } from \"../entity.js\";\nimport { isPgEnum } from \"../pg-core/columns/enum.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { tracer } from \"../tracing.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { Column } from \"../column.js\";\nimport { IsAlias, Table } from \"../table.js\";\nclass FakePrimitiveParam {\n  static [entityKind] = \"FakePrimitiveParam\";\n}\nfunction isSQLWrapper(value) {\n  return value !== null && value !== void 0 && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n  const result = { sql: \"\", params: [] };\n  for (const query of queries) {\n    result.sql += query.sql;\n    result.params.push(...query.params);\n    if (query.typings?.length) {\n      if (!result.typings) {\n        result.typings = [];\n      }\n      result.typings.push(...query.typings);\n    }\n  }\n  return result;\n}\nclass StringChunk {\n  static [entityKind] = \"StringChunk\";\n  value;\n  constructor(value) {\n    this.value = Array.isArray(value) ? value : [value];\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nclass SQL {\n  constructor(queryChunks) {\n    this.queryChunks = queryChunks;\n  }\n  static [entityKind] = \"SQL\";\n  /** @internal */\n  decoder = noopDecoder;\n  shouldInlineParams = false;\n  append(query) {\n    this.queryChunks.push(...query.queryChunks);\n    return this;\n  }\n  toQuery(config) {\n    return tracer.startActiveSpan(\"drizzle.buildSQL\", (span) => {\n      const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n      span?.setAttributes({\n        \"drizzle.query.text\": query.sql,\n        \"drizzle.query.params\": JSON.stringify(query.params)\n      });\n      return query;\n    });\n  }\n  buildQueryFromSourceParams(chunks, _config) {\n    const config = Object.assign({}, _config, {\n      inlineParams: _config.inlineParams || this.shouldInlineParams,\n      paramStartIndex: _config.paramStartIndex || { value: 0 }\n    });\n    const {\n      casing,\n      escapeName,\n      escapeParam,\n      prepareTyping,\n      inlineParams,\n      paramStartIndex\n    } = config;\n    return mergeQueries(chunks.map((chunk) => {\n      if (is(chunk, StringChunk)) {\n        return { sql: chunk.value.join(\"\"), params: [] };\n      }\n      if (is(chunk, Name)) {\n        return { sql: escapeName(chunk.value), params: [] };\n      }\n      if (chunk === void 0) {\n        return { sql: \"\", params: [] };\n      }\n      if (Array.isArray(chunk)) {\n        const result = [new StringChunk(\"(\")];\n        for (const [i, p] of chunk.entries()) {\n          result.push(p);\n          if (i < chunk.length - 1) {\n            result.push(new StringChunk(\", \"));\n          }\n        }\n        result.push(new StringChunk(\")\"));\n        return this.buildQueryFromSourceParams(result, config);\n      }\n      if (is(chunk, SQL)) {\n        return this.buildQueryFromSourceParams(chunk.queryChunks, {\n          ...config,\n          inlineParams: inlineParams || chunk.shouldInlineParams\n        });\n      }\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        const tableName = chunk[Table.Symbol.Name];\n        return {\n          sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n          params: []\n        };\n      }\n      if (is(chunk, Column)) {\n        const columnName = casing.getColumnCasing(chunk);\n        if (_config.invokeSource === \"indexes\") {\n          return { sql: escapeName(columnName), params: [] };\n        }\n        const schemaName = chunk.table[Table.Symbol.Schema];\n        return {\n          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName) : escapeName(schemaName) + \".\" + escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName),\n          params: []\n        };\n      }\n      if (is(chunk, View)) {\n        const schemaName = chunk[ViewBaseConfig].schema;\n        const viewName = chunk[ViewBaseConfig].name;\n        return {\n          sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n          params: []\n        };\n      }\n      if (is(chunk, Param)) {\n        if (is(chunk.value, Placeholder)) {\n          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n        }\n        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n        if (is(mappedValue, SQL)) {\n          return this.buildQueryFromSourceParams([mappedValue], config);\n        }\n        if (inlineParams) {\n          return { sql: this.mapInlineParam(mappedValue, config), params: [] };\n        }\n        let typings = [\"none\"];\n        if (prepareTyping) {\n          typings = [prepareTyping(chunk.encoder)];\n        }\n        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n      }\n      if (is(chunk, Placeholder)) {\n        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n      }\n      if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {\n        return { sql: escapeName(chunk.fieldAlias), params: [] };\n      }\n      if (is(chunk, Subquery)) {\n        if (chunk._.isWith) {\n          return { sql: escapeName(chunk._.alias), params: [] };\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk._.sql,\n          new StringChunk(\") \"),\n          new Name(chunk._.alias)\n        ], config);\n      }\n      if (isPgEnum(chunk)) {\n        if (chunk.schema) {\n          return { sql: escapeName(chunk.schema) + \".\" + escapeName(chunk.enumName), params: [] };\n        }\n        return { sql: escapeName(chunk.enumName), params: [] };\n      }\n      if (isSQLWrapper(chunk)) {\n        if (chunk.shouldOmitSQLParens?.()) {\n          return this.buildQueryFromSourceParams([chunk.getSQL()], config);\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk.getSQL(),\n          new StringChunk(\")\")\n        ], config);\n      }\n      if (inlineParams) {\n        return { sql: this.mapInlineParam(chunk, config), params: [] };\n      }\n      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n    }));\n  }\n  mapInlineParam(chunk, { escapeString }) {\n    if (chunk === null) {\n      return \"null\";\n    }\n    if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n      return chunk.toString();\n    }\n    if (typeof chunk === \"string\") {\n      return escapeString(chunk);\n    }\n    if (typeof chunk === \"object\") {\n      const mappedValueAsString = chunk.toString();\n      if (mappedValueAsString === \"[object Object]\") {\n        return escapeString(JSON.stringify(chunk));\n      }\n      return escapeString(mappedValueAsString);\n    }\n    throw new Error(\"Unexpected param value: \" + chunk);\n  }\n  getSQL() {\n    return this;\n  }\n  as(alias) {\n    if (alias === void 0) {\n      return this;\n    }\n    return new SQL.Aliased(this, alias);\n  }\n  mapWith(decoder) {\n    this.decoder = typeof decoder === \"function\" ? { mapFromDriverValue: decoder } : decoder;\n    return this;\n  }\n  inlineParams() {\n    this.shouldInlineParams = true;\n    return this;\n  }\n  /**\n   * This method is used to conditionally include a part of the query.\n   *\n   * @param condition - Condition to check\n   * @returns itself if the condition is `true`, otherwise `undefined`\n   */\n  if(condition) {\n    return condition ? this : void 0;\n  }\n}\nclass Name {\n  constructor(value) {\n    this.value = value;\n  }\n  static [entityKind] = \"Name\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction name(value) {\n  return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n  return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n  mapFromDriverValue: (value) => value\n};\nconst noopEncoder = {\n  mapToDriverValue: (value) => value\n};\nconst noopMapper = {\n  ...noopDecoder,\n  ...noopEncoder\n};\nclass Param {\n  /**\n   * @param value - Parameter value\n   * @param encoder - Encoder to convert the value to a driver parameter\n   */\n  constructor(value, encoder = noopEncoder) {\n    this.value = value;\n    this.encoder = encoder;\n  }\n  static [entityKind] = \"Param\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction param(value, encoder) {\n  return new Param(value, encoder);\n}\nfunction sql(strings, ...params) {\n  const queryChunks = [];\n  if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n    queryChunks.push(new StringChunk(strings[0]));\n  }\n  for (const [paramIndex, param2] of params.entries()) {\n    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));\n  }\n  return new SQL(queryChunks);\n}\n((sql2) => {\n  function empty() {\n    return new SQL([]);\n  }\n  sql2.empty = empty;\n  function fromList(list) {\n    return new SQL(list);\n  }\n  sql2.fromList = fromList;\n  function raw(str) {\n    return new SQL([new StringChunk(str)]);\n  }\n  sql2.raw = raw;\n  function join(chunks, separator) {\n    const result = [];\n    for (const [i, chunk] of chunks.entries()) {\n      if (i > 0 && separator !== void 0) {\n        result.push(separator);\n      }\n      result.push(chunk);\n    }\n    return new SQL(result);\n  }\n  sql2.join = join;\n  function identifier(value) {\n    return new Name(value);\n  }\n  sql2.identifier = identifier;\n  function placeholder2(name2) {\n    return new Placeholder(name2);\n  }\n  sql2.placeholder = placeholder2;\n  function param2(value, encoder) {\n    return new Param(value, encoder);\n  }\n  sql2.param = param2;\n})(sql || (sql = {}));\n((SQL2) => {\n  class Aliased {\n    constructor(sql2, fieldAlias) {\n      this.sql = sql2;\n      this.fieldAlias = fieldAlias;\n    }\n    static [entityKind] = \"SQL.Aliased\";\n    /** @internal */\n    isSelectionField = false;\n    getSQL() {\n      return this.sql;\n    }\n    /** @internal */\n    clone() {\n      return new Aliased(this.sql, this.fieldAlias);\n    }\n  }\n  SQL2.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n  constructor(name2) {\n    this.name = name2;\n  }\n  static [entityKind] = \"Placeholder\";\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction placeholder(name2) {\n  return new Placeholder(name2);\n}\nfunction fillPlaceholders(params, values) {\n  return params.map((p) => {\n    if (is(p, Placeholder)) {\n      if (!(p.name in values)) {\n        throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n      }\n      return values[p.name];\n    }\n    if (is(p, Param) && is(p.value, Placeholder)) {\n      if (!(p.value.name in values)) {\n        throw new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n      }\n      return p.encoder.mapToDriverValue(values[p.value.name]);\n    }\n    return p;\n  });\n}\nconst IsDrizzleView = Symbol.for(\"drizzle:IsDrizzleView\");\nclass View {\n  static [entityKind] = \"View\";\n  /** @internal */\n  [ViewBaseConfig];\n  /** @internal */\n  [IsDrizzleView] = true;\n  constructor({ name: name2, schema, selectedFields, query }) {\n    this[ViewBaseConfig] = {\n      name: name2,\n      originalName: name2,\n      schema,\n      selectedFields,\n      query,\n      isExisting: !query,\n      isAlias: false\n    };\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction isView(view) {\n  return typeof view === \"object\" && view !== null && IsDrizzleView in view;\n}\nfunction getViewName(view) {\n  return view[ViewBaseConfig].name;\n}\nColumn.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nTable.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nSubquery.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nexport {\n  FakePrimitiveParam,\n  Name,\n  Param,\n  Placeholder,\n  SQL,\n  StringChunk,\n  View,\n  fillPlaceholders,\n  getViewName,\n  isDriverValueEncoder,\n  isSQLWrapper,\n  isView,\n  name,\n  noopDecoder,\n  noopEncoder,\n  noopMapper,\n  param,\n  placeholder,\n  sql\n};\n//# sourceMappingURL=sql.js.map","import { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nimport { Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass ColumnAliasProxyHandler {\n  constructor(table) {\n    this.table = table;\n  }\n  static [entityKind] = \"ColumnAliasProxyHandler\";\n  get(columnObj, prop) {\n    if (prop === \"table\") {\n      return this.table;\n    }\n    return columnObj[prop];\n  }\n}\nclass TableAliasProxyHandler {\n  constructor(alias, replaceOriginalName) {\n    this.alias = alias;\n    this.replaceOriginalName = replaceOriginalName;\n  }\n  static [entityKind] = \"TableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === Table.Symbol.IsAlias) {\n      return true;\n    }\n    if (prop === Table.Symbol.Name) {\n      return this.alias;\n    }\n    if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n      return this.alias;\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...target[ViewBaseConfig],\n        name: this.alias,\n        isAlias: true\n      };\n    }\n    if (prop === Table.Symbol.Columns) {\n      const columns = target[Table.Symbol.Columns];\n      if (!columns) {\n        return columns;\n      }\n      const proxiedColumns = {};\n      Object.keys(columns).map((key) => {\n        proxiedColumns[key] = new Proxy(\n          columns[key],\n          new ColumnAliasProxyHandler(new Proxy(target, this))\n        );\n      });\n      return proxiedColumns;\n    }\n    const value = target[prop];\n    if (is(value, Column)) {\n      return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n    }\n    return value;\n  }\n}\nclass RelationTableAliasProxyHandler {\n  constructor(alias) {\n    this.alias = alias;\n  }\n  static [entityKind] = \"RelationTableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === \"sourceTable\") {\n      return aliasedTable(target.sourceTable, this.alias);\n    }\n    return target[prop];\n  }\n}\nfunction aliasedTable(table, tableAlias) {\n  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n  return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n  return new Proxy(\n    column,\n    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))\n  );\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n  return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n  return sql.join(query.queryChunks.map((c) => {\n    if (is(c, Column)) {\n      return aliasedTableColumn(c, alias);\n    }\n    if (is(c, SQL)) {\n      return mapColumnsInSQLToAlias(c, alias);\n    }\n    if (is(c, SQL.Aliased)) {\n      return mapColumnsInAliasedSQLToAlias(c, alias);\n    }\n    return c;\n  }));\n}\nexport {\n  ColumnAliasProxyHandler,\n  RelationTableAliasProxyHandler,\n  TableAliasProxyHandler,\n  aliasedRelation,\n  aliasedTable,\n  aliasedTableColumn,\n  mapColumnsInAliasedSQLToAlias,\n  mapColumnsInSQLToAlias\n};\n//# sourceMappingURL=alias.js.map","import { ColumnAliasProxyHandler, TableAliasProxyHandler } from \"./alias.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass SelectionProxyHandler {\n  static [entityKind] = \"SelectionProxyHandler\";\n  config;\n  constructor(config) {\n    this.config = { ...config };\n  }\n  get(subquery, prop) {\n    if (prop === \"_\") {\n      return {\n        ...subquery[\"_\"],\n        selectedFields: new Proxy(\n          subquery._.selectedFields,\n          this\n        )\n      };\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...subquery[ViewBaseConfig],\n        selectedFields: new Proxy(\n          subquery[ViewBaseConfig].selectedFields,\n          this\n        )\n      };\n    }\n    if (typeof prop === \"symbol\") {\n      return subquery[prop];\n    }\n    const columns = is(subquery, Subquery) ? subquery._.selectedFields : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n    const value = columns[prop];\n    if (is(value, SQL.Aliased)) {\n      if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n        return value.sql;\n      }\n      const newValue = value.clone();\n      newValue.isSelectionField = true;\n      return newValue;\n    }\n    if (is(value, SQL)) {\n      if (this.config.sqlBehavior === \"sql\") {\n        return value;\n      }\n      throw new Error(\n        `You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`\n      );\n    }\n    if (is(value, Column)) {\n      if (this.config.alias) {\n        return new Proxy(\n          value,\n          new ColumnAliasProxyHandler(\n            new Proxy(\n              value.table,\n              new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)\n            )\n          )\n        );\n      }\n      return value;\n    }\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    return new Proxy(value, new SelectionProxyHandler(this.config));\n  }\n}\nexport {\n  SelectionProxyHandler\n};\n//# sourceMappingURL=selection-proxy.js.map","import { Column } from \"./column.js\";\nimport { is } from \"./entity.js\";\nimport { Param, SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { getTableName, Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nfunction mapResultRow(columns, row, joinsNotNullableMap) {\n  const nullifyMap = {};\n  const result = columns.reduce(\n    (result2, { path, field }, columnIndex) => {\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      let node = result2;\n      for (const [pathChunkIndex, pathChunk] of path.entries()) {\n        if (pathChunkIndex < path.length - 1) {\n          if (!(pathChunk in node)) {\n            node[pathChunk] = {};\n          }\n          node = node[pathChunk];\n        } else {\n          const rawValue = row[columnIndex];\n          const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n            const objectName = path[0];\n            if (!(objectName in nullifyMap)) {\n              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n            } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n              nullifyMap[objectName] = false;\n            }\n          }\n        }\n      }\n      return result2;\n    },\n    {}\n  );\n  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n    for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n      if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n        result[objectName] = null;\n      }\n    }\n  }\n  return result;\n}\nfunction orderSelectedFields(fields, pathPrefix) {\n  return Object.entries(fields).reduce((result, [name, field]) => {\n    if (typeof name !== \"string\") {\n      return result;\n    }\n    const newPath = pathPrefix ? [...pathPrefix, name] : [name];\n    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n      result.push({ path: newPath, field });\n    } else if (is(field, Table)) {\n      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n    } else {\n      result.push(...orderSelectedFields(field, newPath));\n    }\n    return result;\n  }, []);\n}\nfunction haveSameKeys(left, right) {\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n  for (const [index, key] of leftKeys.entries()) {\n    if (key !== rightKeys[index]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction mapUpdateSet(table, values) {\n  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {\n    if (is(value, SQL) || is(value, Column)) {\n      return [key, value];\n    } else {\n      return [key, new Param(value, table[Table.Symbol.Columns][key])];\n    }\n  });\n  if (entries.length === 0) {\n    throw new Error(\"No values to set\");\n  }\n  return Object.fromEntries(entries);\n}\nfunction applyMixins(baseClass, extendedClasses) {\n  for (const extendedClass of extendedClasses) {\n    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n      if (name === \"constructor\")\n        continue;\n      Object.defineProperty(\n        baseClass.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)\n      );\n    }\n  }\n}\nfunction getTableColumns(table) {\n  return table[Table.Symbol.Columns];\n}\nfunction getViewSelectedFields(view) {\n  return view[ViewBaseConfig].selectedFields;\n}\nfunction getTableLikeName(table) {\n  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction getColumnNameAndConfig(a, b) {\n  return {\n    name: typeof a === \"string\" && a.length > 0 ? a : \"\",\n    config: typeof a === \"object\" ? a : b\n  };\n}\nconst _ = {};\nconst __ = {};\nfunction isConfig(data) {\n  if (typeof data !== \"object\" || data === null)\n    return false;\n  if (data.constructor.name !== \"Object\")\n    return false;\n  if (\"logger\" in data) {\n    const type = typeof data[\"logger\"];\n    if (type !== \"boolean\" && (type !== \"object\" || typeof data[\"logger\"][\"logQuery\"] !== \"function\") && type !== \"undefined\")\n      return false;\n    return true;\n  }\n  if (\"schema\" in data) {\n    const type = typeof data[\"schema\"];\n    if (type !== \"object\" && type !== \"undefined\")\n      return false;\n    return true;\n  }\n  if (\"casing\" in data) {\n    const type = typeof data[\"casing\"];\n    if (type !== \"string\" && type !== \"undefined\")\n      return false;\n    return true;\n  }\n  if (\"mode\" in data) {\n    if (data[\"mode\"] !== \"default\" || data[\"mode\"] !== \"planetscale\" || data[\"mode\"] !== void 0)\n      return false;\n    return true;\n  }\n  if (\"connection\" in data) {\n    const type = typeof data[\"connection\"];\n    if (type !== \"string\" && type !== \"object\" && type !== \"undefined\")\n      return false;\n    return true;\n  }\n  if (\"client\" in data) {\n    const type = typeof data[\"client\"];\n    if (type !== \"object\" && type !== \"function\" && type !== \"undefined\")\n      return false;\n    return true;\n  }\n  if (Object.keys(data).length === 0)\n    return true;\n  return false;\n}\nexport {\n  applyMixins,\n  getColumnNameAndConfig,\n  getTableColumns,\n  getTableLikeName,\n  getViewSelectedFields,\n  haveSameKeys,\n  isConfig,\n  mapResultRow,\n  mapUpdateSet,\n  orderSelectedFields\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { getTableName, Table } from \"../../table.js\";\nimport { tracer } from \"../../tracing.js\";\nimport { orderSelectedFields } from \"../../utils.js\";\nclass PgDeleteBase extends QueryPromise {\n  constructor(table, session, dialect, withList) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, withList };\n  }\n  static [entityKind] = \"PgDelete\";\n  config;\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will delete only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be deleted.\n   *\n   * ```ts\n   * // Delete all cars with green color\n   * await db.delete(cars).where(eq(cars.color, 'green'));\n   * // or\n   * await db.delete(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Delete all BMW cars with a green color\n   * await db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Delete all cars with the green or blue color\n   * await db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  returning(fields = this.config.table[Table.Symbol.Columns]) {\n    this.config.returningFields = fields;\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildDeleteQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(name) {\n    return tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n      return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n    });\n  }\n  prepare(name) {\n    return this._prepare(name);\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute = (placeholderValues) => {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      return this._prepare().execute(placeholderValues, this.authToken);\n    });\n  };\n  /** @internal */\n  getSelectedFields() {\n    return this.config.returningFields ? new Proxy(\n      this.config.returningFields,\n      new SelectionProxyHandler({\n        alias: getTableName(this.config.table),\n        sqlAliasedBehavior: \"alias\",\n        sqlBehavior: \"error\"\n      })\n    ) : void 0;\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  PgDeleteBase\n};\n//# sourceMappingURL=delete.js.map","import { entityKind } from \"./entity.js\";\nimport { Table } from \"./table.js\";\nfunction toSnakeCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.map((word) => word.toLowerCase()).join(\"_\");\n}\nfunction toCamelCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.reduce((acc, word, i) => {\n    const formattedWord = i === 0 ? word.toLowerCase() : `${word[0].toUpperCase()}${word.slice(1)}`;\n    return acc + formattedWord;\n  }, \"\");\n}\nfunction noopCase(input) {\n  return input;\n}\nclass CasingCache {\n  static [entityKind] = \"CasingCache\";\n  /** @internal */\n  cache = {};\n  cachedTables = {};\n  convert;\n  constructor(casing) {\n    this.convert = casing === \"snake_case\" ? toSnakeCase : casing === \"camelCase\" ? toCamelCase : noopCase;\n  }\n  getColumnCasing(column) {\n    if (!column.keyAsName)\n      return column.name;\n    const schema = column.table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = column.table[Table.Symbol.OriginalName];\n    const key = `${schema}.${tableName}.${column.name}`;\n    if (!this.cache[key]) {\n      this.cacheTable(column.table);\n    }\n    return this.cache[key];\n  }\n  cacheTable(table) {\n    const schema = table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = table[Table.Symbol.OriginalName];\n    const tableKey = `${schema}.${tableName}`;\n    if (!this.cachedTables[tableKey]) {\n      for (const column of Object.values(table[Table.Symbol.Columns])) {\n        const columnKey = `${tableKey}.${column.name}`;\n        this.cache[columnKey] = this.convert(column.name);\n      }\n      this.cachedTables[tableKey] = true;\n    }\n  }\n  clearCache() {\n    this.cache = {};\n    this.cachedTables = {};\n  }\n}\nexport {\n  CasingCache,\n  toCamelCase,\n  toSnakeCase\n};\n//# sourceMappingURL=casing.js.map","import { entityKind } from \"./entity.js\";\nclass DrizzleError extends Error {\n  static [entityKind] = \"DrizzleError\";\n  constructor({ message, cause }) {\n    super(message);\n    this.name = \"DrizzleError\";\n    this.cause = cause;\n  }\n}\nclass TransactionRollbackError extends DrizzleError {\n  static [entityKind] = \"TransactionRollbackError\";\n  constructor() {\n    super({ message: \"Rollback\" });\n  }\n}\nexport {\n  DrizzleError,\n  TransactionRollbackError\n};\n//# sourceMappingURL=errors.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumnBuilder } from \"./common.js\";\nclass PgIntColumnBaseBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgIntColumnBaseBuilder\";\n  generatedAlwaysAsIdentity(sequence) {\n    if (sequence) {\n      const { name, ...options } = sequence;\n      this.config.generatedIdentity = {\n        type: \"always\",\n        sequenceName: name,\n        sequenceOptions: options\n      };\n    } else {\n      this.config.generatedIdentity = {\n        type: \"always\"\n      };\n    }\n    this.config.hasDefault = true;\n    this.config.notNull = true;\n    return this;\n  }\n  generatedByDefaultAsIdentity(sequence) {\n    if (sequence) {\n      const { name, ...options } = sequence;\n      this.config.generatedIdentity = {\n        type: \"byDefault\",\n        sequenceName: name,\n        sequenceOptions: options\n      };\n    } else {\n      this.config.generatedIdentity = {\n        type: \"byDefault\"\n      };\n    }\n    this.config.hasDefault = true;\n    this.config.notNull = true;\n    return this;\n  }\n}\nexport {\n  PgIntColumnBaseBuilder\n};\n//# sourceMappingURL=int.common.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgIntColumnBaseBuilder } from \"./int.common.js\";\nclass PgBigInt53Builder extends PgIntColumnBaseBuilder {\n  static [entityKind] = \"PgBigInt53Builder\";\n  constructor(name) {\n    super(name, \"number\", \"PgBigInt53\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgBigInt53(table, this.config);\n  }\n}\nclass PgBigInt53 extends PgColumn {\n  static [entityKind] = \"PgBigInt53\";\n  getSQLType() {\n    return \"bigint\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\") {\n      return value;\n    }\n    return Number(value);\n  }\n}\nclass PgBigInt64Builder extends PgIntColumnBaseBuilder {\n  static [entityKind] = \"PgBigInt64Builder\";\n  constructor(name) {\n    super(name, \"bigint\", \"PgBigInt64\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgBigInt64(\n      table,\n      this.config\n    );\n  }\n}\nclass PgBigInt64 extends PgColumn {\n  static [entityKind] = \"PgBigInt64\";\n  getSQLType() {\n    return \"bigint\";\n  }\n  // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n  mapFromDriverValue(value) {\n    return BigInt(value);\n  }\n}\nfunction bigint(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config.mode === \"number\") {\n    return new PgBigInt53Builder(name);\n  }\n  return new PgBigInt64Builder(name);\n}\nexport {\n  PgBigInt53,\n  PgBigInt53Builder,\n  PgBigInt64,\n  PgBigInt64Builder,\n  bigint\n};\n//# sourceMappingURL=bigint.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgBigSerial53Builder extends PgColumnBuilder {\n  static [entityKind] = \"PgBigSerial53Builder\";\n  constructor(name) {\n    super(name, \"number\", \"PgBigSerial53\");\n    this.config.hasDefault = true;\n    this.config.notNull = true;\n  }\n  /** @internal */\n  build(table) {\n    return new PgBigSerial53(\n      table,\n      this.config\n    );\n  }\n}\nclass PgBigSerial53 extends PgColumn {\n  static [entityKind] = \"PgBigSerial53\";\n  getSQLType() {\n    return \"bigserial\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\") {\n      return value;\n    }\n    return Number(value);\n  }\n}\nclass PgBigSerial64Builder extends PgColumnBuilder {\n  static [entityKind] = \"PgBigSerial64Builder\";\n  constructor(name) {\n    super(name, \"bigint\", \"PgBigSerial64\");\n    this.config.hasDefault = true;\n  }\n  /** @internal */\n  build(table) {\n    return new PgBigSerial64(\n      table,\n      this.config\n    );\n  }\n}\nclass PgBigSerial64 extends PgColumn {\n  static [entityKind] = \"PgBigSerial64\";\n  getSQLType() {\n    return \"bigserial\";\n  }\n  // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n  mapFromDriverValue(value) {\n    return BigInt(value);\n  }\n}\nfunction bigserial(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config.mode === \"number\") {\n    return new PgBigSerial53Builder(name);\n  }\n  return new PgBigSerial64Builder(name);\n}\nexport {\n  PgBigSerial53,\n  PgBigSerial53Builder,\n  PgBigSerial64,\n  PgBigSerial64Builder,\n  bigserial\n};\n//# sourceMappingURL=bigserial.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgBooleanBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgBooleanBuilder\";\n  constructor(name) {\n    super(name, \"boolean\", \"PgBoolean\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgBoolean(table, this.config);\n  }\n}\nclass PgBoolean extends PgColumn {\n  static [entityKind] = \"PgBoolean\";\n  getSQLType() {\n    return \"boolean\";\n  }\n}\nfunction boolean(name) {\n  return new PgBooleanBuilder(name ?? \"\");\n}\nexport {\n  PgBoolean,\n  PgBooleanBuilder,\n  boolean\n};\n//# sourceMappingURL=boolean.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgCharBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgCharBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"PgChar\");\n    this.config.length = config.length;\n    this.config.enumValues = config.enum;\n  }\n  /** @internal */\n  build(table) {\n    return new PgChar(\n      table,\n      this.config\n    );\n  }\n}\nclass PgChar extends PgColumn {\n  static [entityKind] = \"PgChar\";\n  length = this.config.length;\n  enumValues = this.config.enumValues;\n  getSQLType() {\n    return this.length === void 0 ? `char` : `char(${this.length})`;\n  }\n}\nfunction char(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgCharBuilder(name, config);\n}\nexport {\n  PgChar,\n  PgCharBuilder,\n  char\n};\n//# sourceMappingURL=char.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgCidrBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgCidrBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"PgCidr\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgCidr(table, this.config);\n  }\n}\nclass PgCidr extends PgColumn {\n  static [entityKind] = \"PgCidr\";\n  getSQLType() {\n    return \"cidr\";\n  }\n}\nfunction cidr(name) {\n  return new PgCidrBuilder(name ?? \"\");\n}\nexport {\n  PgCidr,\n  PgCidrBuilder,\n  cidr\n};\n//# sourceMappingURL=cidr.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgCustomColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgCustomColumnBuilder\";\n  constructor(name, fieldConfig, customTypeParams) {\n    super(name, \"custom\", \"PgCustomColumn\");\n    this.config.fieldConfig = fieldConfig;\n    this.config.customTypeParams = customTypeParams;\n  }\n  /** @internal */\n  build(table) {\n    return new PgCustomColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgCustomColumn extends PgColumn {\n  static [entityKind] = \"PgCustomColumn\";\n  sqlName;\n  mapTo;\n  mapFrom;\n  constructor(table, config) {\n    super(table, config);\n    this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n    this.mapTo = config.customTypeParams.toDriver;\n    this.mapFrom = config.customTypeParams.fromDriver;\n  }\n  getSQLType() {\n    return this.sqlName;\n  }\n  mapFromDriverValue(value) {\n    return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n  }\n  mapToDriverValue(value) {\n    return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n  }\n}\nfunction customType(customTypeParams) {\n  return (a, b) => {\n    const { name, config } = getColumnNameAndConfig(a, b);\n    return new PgCustomColumnBuilder(name, config, customTypeParams);\n  };\n}\nexport {\n  PgCustomColumn,\n  PgCustomColumnBuilder,\n  customType\n};\n//# sourceMappingURL=custom.js.map","import { entityKind } from \"../../entity.js\";\nimport { sql } from \"../../sql/sql.js\";\nimport { PgColumnBuilder } from \"./common.js\";\nclass PgDateColumnBaseBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgDateColumnBaseBuilder\";\n  defaultNow() {\n    return this.default(sql`now()`);\n  }\n}\nexport {\n  PgDateColumnBaseBuilder\n};\n//# sourceMappingURL=date.common.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgDateColumnBaseBuilder } from \"./date.common.js\";\nclass PgDateBuilder extends PgDateColumnBaseBuilder {\n  static [entityKind] = \"PgDateBuilder\";\n  constructor(name) {\n    super(name, \"date\", \"PgDate\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgDate(table, this.config);\n  }\n}\nclass PgDate extends PgColumn {\n  static [entityKind] = \"PgDate\";\n  getSQLType() {\n    return \"date\";\n  }\n  mapFromDriverValue(value) {\n    return new Date(value);\n  }\n  mapToDriverValue(value) {\n    return value.toISOString();\n  }\n}\nclass PgDateStringBuilder extends PgDateColumnBaseBuilder {\n  static [entityKind] = \"PgDateStringBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"PgDateString\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgDateString(\n      table,\n      this.config\n    );\n  }\n}\nclass PgDateString extends PgColumn {\n  static [entityKind] = \"PgDateString\";\n  getSQLType() {\n    return \"date\";\n  }\n}\nfunction date(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"date\") {\n    return new PgDateBuilder(name);\n  }\n  return new PgDateStringBuilder(name);\n}\nexport {\n  PgDate,\n  PgDateBuilder,\n  PgDateString,\n  PgDateStringBuilder,\n  date\n};\n//# sourceMappingURL=date.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgDoublePrecisionBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgDoublePrecisionBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"PgDoublePrecision\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgDoublePrecision(\n      table,\n      this.config\n    );\n  }\n}\nclass PgDoublePrecision extends PgColumn {\n  static [entityKind] = \"PgDoublePrecision\";\n  getSQLType() {\n    return \"double precision\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      return Number.parseFloat(value);\n    }\n    return value;\n  }\n}\nfunction doublePrecision(name) {\n  return new PgDoublePrecisionBuilder(name ?? \"\");\n}\nexport {\n  PgDoublePrecision,\n  PgDoublePrecisionBuilder,\n  doublePrecision\n};\n//# sourceMappingURL=double-precision.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgInetBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgInetBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"PgInet\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgInet(table, this.config);\n  }\n}\nclass PgInet extends PgColumn {\n  static [entityKind] = \"PgInet\";\n  getSQLType() {\n    return \"inet\";\n  }\n}\nfunction inet(name) {\n  return new PgInetBuilder(name ?? \"\");\n}\nexport {\n  PgInet,\n  PgInetBuilder,\n  inet\n};\n//# sourceMappingURL=inet.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgIntColumnBaseBuilder } from \"./int.common.js\";\nclass PgIntegerBuilder extends PgIntColumnBaseBuilder {\n  static [entityKind] = \"PgIntegerBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"PgInteger\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgInteger(table, this.config);\n  }\n}\nclass PgInteger extends PgColumn {\n  static [entityKind] = \"PgInteger\";\n  getSQLType() {\n    return \"integer\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      return Number.parseInt(value);\n    }\n    return value;\n  }\n}\nfunction integer(name) {\n  return new PgIntegerBuilder(name ?? \"\");\n}\nexport {\n  PgInteger,\n  PgIntegerBuilder,\n  integer\n};\n//# sourceMappingURL=integer.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgIntervalBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgIntervalBuilder\";\n  constructor(name, intervalConfig) {\n    super(name, \"string\", \"PgInterval\");\n    this.config.intervalConfig = intervalConfig;\n  }\n  /** @internal */\n  build(table) {\n    return new PgInterval(table, this.config);\n  }\n}\nclass PgInterval extends PgColumn {\n  static [entityKind] = \"PgInterval\";\n  fields = this.config.intervalConfig.fields;\n  precision = this.config.intervalConfig.precision;\n  getSQLType() {\n    const fields = this.fields ? ` ${this.fields}` : \"\";\n    const precision = this.precision ? `(${this.precision})` : \"\";\n    return `interval${fields}${precision}`;\n  }\n}\nfunction interval(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgIntervalBuilder(name, config);\n}\nexport {\n  PgInterval,\n  PgIntervalBuilder,\n  interval\n};\n//# sourceMappingURL=interval.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgJsonBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"PgJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgJson(table, this.config);\n  }\n}\nclass PgJson extends PgColumn {\n  static [entityKind] = \"PgJson\";\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return \"json\";\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    }\n    return value;\n  }\n}\nfunction json(name) {\n  return new PgJsonBuilder(name ?? \"\");\n}\nexport {\n  PgJson,\n  PgJsonBuilder,\n  json\n};\n//# sourceMappingURL=json.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgJsonbBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgJsonbBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"PgJsonb\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgJsonb(table, this.config);\n  }\n}\nclass PgJsonb extends PgColumn {\n  static [entityKind] = \"PgJsonb\";\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return \"jsonb\";\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    }\n    return value;\n  }\n}\nfunction jsonb(name) {\n  return new PgJsonbBuilder(name ?? \"\");\n}\nexport {\n  PgJsonb,\n  PgJsonbBuilder,\n  jsonb\n};\n//# sourceMappingURL=jsonb.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgLineBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgLineBuilder\";\n  constructor(name) {\n    super(name, \"array\", \"PgLine\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgLineTuple(\n      table,\n      this.config\n    );\n  }\n}\nclass PgLineTuple extends PgColumn {\n  static [entityKind] = \"PgLine\";\n  getSQLType() {\n    return \"line\";\n  }\n  mapFromDriverValue(value) {\n    const [a, b, c] = value.slice(1, -1).split(\",\");\n    return [Number.parseFloat(a), Number.parseFloat(b), Number.parseFloat(c)];\n  }\n  mapToDriverValue(value) {\n    return `{${value[0]},${value[1]},${value[2]}}`;\n  }\n}\nclass PgLineABCBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgLineABCBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"PgLineABC\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgLineABC(\n      table,\n      this.config\n    );\n  }\n}\nclass PgLineABC extends PgColumn {\n  static [entityKind] = \"PgLineABC\";\n  getSQLType() {\n    return \"line\";\n  }\n  mapFromDriverValue(value) {\n    const [a, b, c] = value.slice(1, -1).split(\",\");\n    return { a: Number.parseFloat(a), b: Number.parseFloat(b), c: Number.parseFloat(c) };\n  }\n  mapToDriverValue(value) {\n    return `{${value.a},${value.b},${value.c}}`;\n  }\n}\nfunction line(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (!config?.mode || config.mode === \"tuple\") {\n    return new PgLineBuilder(name);\n  }\n  return new PgLineABCBuilder(name);\n}\nexport {\n  PgLineABC,\n  PgLineABCBuilder,\n  PgLineBuilder,\n  PgLineTuple,\n  line\n};\n//# sourceMappingURL=line.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgMacaddrBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgMacaddrBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"PgMacaddr\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgMacaddr(table, this.config);\n  }\n}\nclass PgMacaddr extends PgColumn {\n  static [entityKind] = \"PgMacaddr\";\n  getSQLType() {\n    return \"macaddr\";\n  }\n}\nfunction macaddr(name) {\n  return new PgMacaddrBuilder(name ?? \"\");\n}\nexport {\n  PgMacaddr,\n  PgMacaddrBuilder,\n  macaddr\n};\n//# sourceMappingURL=macaddr.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgMacaddr8Builder extends PgColumnBuilder {\n  static [entityKind] = \"PgMacaddr8Builder\";\n  constructor(name) {\n    super(name, \"string\", \"PgMacaddr8\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgMacaddr8(table, this.config);\n  }\n}\nclass PgMacaddr8 extends PgColumn {\n  static [entityKind] = \"PgMacaddr8\";\n  getSQLType() {\n    return \"macaddr8\";\n  }\n}\nfunction macaddr8(name) {\n  return new PgMacaddr8Builder(name ?? \"\");\n}\nexport {\n  PgMacaddr8,\n  PgMacaddr8Builder,\n  macaddr8\n};\n//# sourceMappingURL=macaddr8.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgNumericBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgNumericBuilder\";\n  constructor(name, precision, scale) {\n    super(name, \"string\", \"PgNumeric\");\n    this.config.precision = precision;\n    this.config.scale = scale;\n  }\n  /** @internal */\n  build(table) {\n    return new PgNumeric(table, this.config);\n  }\n}\nclass PgNumeric extends PgColumn {\n  static [entityKind] = \"PgNumeric\";\n  precision;\n  scale;\n  constructor(table, config) {\n    super(table, config);\n    this.precision = config.precision;\n    this.scale = config.scale;\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\")\n      return value;\n    return String(value);\n  }\n  getSQLType() {\n    if (this.precision !== void 0 && this.scale !== void 0) {\n      return `numeric(${this.precision}, ${this.scale})`;\n    } else if (this.precision === void 0) {\n      return \"numeric\";\n    } else {\n      return `numeric(${this.precision})`;\n    }\n  }\n}\nclass PgNumericNumberBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgNumericNumberBuilder\";\n  constructor(name, precision, scale) {\n    super(name, \"number\", \"PgNumericNumber\");\n    this.config.precision = precision;\n    this.config.scale = scale;\n  }\n  /** @internal */\n  build(table) {\n    return new PgNumericNumber(\n      table,\n      this.config\n    );\n  }\n}\nclass PgNumericNumber extends PgColumn {\n  static [entityKind] = \"PgNumericNumber\";\n  precision;\n  scale;\n  constructor(table, config) {\n    super(table, config);\n    this.precision = config.precision;\n    this.scale = config.scale;\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\")\n      return value;\n    return Number(value);\n  }\n  mapToDriverValue = String;\n  getSQLType() {\n    if (this.precision !== void 0 && this.scale !== void 0) {\n      return `numeric(${this.precision}, ${this.scale})`;\n    } else if (this.precision === void 0) {\n      return \"numeric\";\n    } else {\n      return `numeric(${this.precision})`;\n    }\n  }\n}\nclass PgNumericBigIntBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgNumericBigIntBuilder\";\n  constructor(name, precision, scale) {\n    super(name, \"bigint\", \"PgNumericBigInt\");\n    this.config.precision = precision;\n    this.config.scale = scale;\n  }\n  /** @internal */\n  build(table) {\n    return new PgNumericBigInt(\n      table,\n      this.config\n    );\n  }\n}\nclass PgNumericBigInt extends PgColumn {\n  static [entityKind] = \"PgNumericBigInt\";\n  precision;\n  scale;\n  constructor(table, config) {\n    super(table, config);\n    this.precision = config.precision;\n    this.scale = config.scale;\n  }\n  mapFromDriverValue = BigInt;\n  mapToDriverValue = String;\n  getSQLType() {\n    if (this.precision !== void 0 && this.scale !== void 0) {\n      return `numeric(${this.precision}, ${this.scale})`;\n    } else if (this.precision === void 0) {\n      return \"numeric\";\n    } else {\n      return `numeric(${this.precision})`;\n    }\n  }\n}\nfunction numeric(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  const mode = config?.mode;\n  return mode === \"number\" ? new PgNumericNumberBuilder(name, config?.precision, config?.scale) : mode === \"bigint\" ? new PgNumericBigIntBuilder(name, config?.precision, config?.scale) : new PgNumericBuilder(name, config?.precision, config?.scale);\n}\nconst decimal = numeric;\nexport {\n  PgNumeric,\n  PgNumericBigInt,\n  PgNumericBigIntBuilder,\n  PgNumericBuilder,\n  PgNumericNumber,\n  PgNumericNumberBuilder,\n  decimal,\n  numeric\n};\n//# sourceMappingURL=numeric.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgPointTupleBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgPointTupleBuilder\";\n  constructor(name) {\n    super(name, \"array\", \"PgPointTuple\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgPointTuple(\n      table,\n      this.config\n    );\n  }\n}\nclass PgPointTuple extends PgColumn {\n  static [entityKind] = \"PgPointTuple\";\n  getSQLType() {\n    return \"point\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      const [x, y] = value.slice(1, -1).split(\",\");\n      return [Number.parseFloat(x), Number.parseFloat(y)];\n    }\n    return [value.x, value.y];\n  }\n  mapToDriverValue(value) {\n    return `(${value[0]},${value[1]})`;\n  }\n}\nclass PgPointObjectBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgPointObjectBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"PgPointObject\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgPointObject(\n      table,\n      this.config\n    );\n  }\n}\nclass PgPointObject extends PgColumn {\n  static [entityKind] = \"PgPointObject\";\n  getSQLType() {\n    return \"point\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") {\n      const [x, y] = value.slice(1, -1).split(\",\");\n      return { x: Number.parseFloat(x), y: Number.parseFloat(y) };\n    }\n    return value;\n  }\n  mapToDriverValue(value) {\n    return `(${value.x},${value.y})`;\n  }\n}\nfunction point(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (!config?.mode || config.mode === \"tuple\") {\n    return new PgPointTupleBuilder(name);\n  }\n  return new PgPointObjectBuilder(name);\n}\nexport {\n  PgPointObject,\n  PgPointObjectBuilder,\n  PgPointTuple,\n  PgPointTupleBuilder,\n  point\n};\n//# sourceMappingURL=point.js.map","function hexToBytes(hex) {\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(Number.parseInt(hex.slice(c, c + 2), 16));\n  }\n  return new Uint8Array(bytes);\n}\nfunction bytesToFloat64(bytes, offset) {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  for (let i = 0; i < 8; i++) {\n    view.setUint8(i, bytes[offset + i]);\n  }\n  return view.getFloat64(0, true);\n}\nfunction parseEWKB(hex) {\n  const bytes = hexToBytes(hex);\n  let offset = 0;\n  const byteOrder = bytes[offset];\n  offset += 1;\n  const view = new DataView(bytes.buffer);\n  const geomType = view.getUint32(offset, byteOrder === 1);\n  offset += 4;\n  let _srid;\n  if (geomType & 536870912) {\n    _srid = view.getUint32(offset, byteOrder === 1);\n    offset += 4;\n  }\n  if ((geomType & 65535) === 1) {\n    const x = bytesToFloat64(bytes, offset);\n    offset += 8;\n    const y = bytesToFloat64(bytes, offset);\n    offset += 8;\n    return [x, y];\n  }\n  throw new Error(\"Unsupported geometry type\");\n}\nexport {\n  parseEWKB\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"../common.js\";\nimport { parseEWKB } from \"./utils.js\";\nclass PgGeometryBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgGeometryBuilder\";\n  constructor(name) {\n    super(name, \"array\", \"PgGeometry\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgGeometry(\n      table,\n      this.config\n    );\n  }\n}\nclass PgGeometry extends PgColumn {\n  static [entityKind] = \"PgGeometry\";\n  getSQLType() {\n    return \"geometry(point)\";\n  }\n  mapFromDriverValue(value) {\n    return parseEWKB(value);\n  }\n  mapToDriverValue(value) {\n    return `point(${value[0]} ${value[1]})`;\n  }\n}\nclass PgGeometryObjectBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgGeometryObjectBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"PgGeometryObject\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgGeometryObject(\n      table,\n      this.config\n    );\n  }\n}\nclass PgGeometryObject extends PgColumn {\n  static [entityKind] = \"PgGeometryObject\";\n  getSQLType() {\n    return \"geometry(point)\";\n  }\n  mapFromDriverValue(value) {\n    const parsed = parseEWKB(value);\n    return { x: parsed[0], y: parsed[1] };\n  }\n  mapToDriverValue(value) {\n    return `point(${value.x} ${value.y})`;\n  }\n}\nfunction geometry(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (!config?.mode || config.mode === \"tuple\") {\n    return new PgGeometryBuilder(name);\n  }\n  return new PgGeometryObjectBuilder(name);\n}\nexport {\n  PgGeometry,\n  PgGeometryBuilder,\n  PgGeometryObject,\n  PgGeometryObjectBuilder,\n  geometry\n};\n//# sourceMappingURL=geometry.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgRealBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgRealBuilder\";\n  constructor(name, length) {\n    super(name, \"number\", \"PgReal\");\n    this.config.length = length;\n  }\n  /** @internal */\n  build(table) {\n    return new PgReal(table, this.config);\n  }\n}\nclass PgReal extends PgColumn {\n  static [entityKind] = \"PgReal\";\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return \"real\";\n  }\n  mapFromDriverValue = (value) => {\n    if (typeof value === \"string\") {\n      return Number.parseFloat(value);\n    }\n    return value;\n  };\n}\nfunction real(name) {\n  return new PgRealBuilder(name ?? \"\");\n}\nexport {\n  PgReal,\n  PgRealBuilder,\n  real\n};\n//# sourceMappingURL=real.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgSerialBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgSerialBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"PgSerial\");\n    this.config.hasDefault = true;\n    this.config.notNull = true;\n  }\n  /** @internal */\n  build(table) {\n    return new PgSerial(table, this.config);\n  }\n}\nclass PgSerial extends PgColumn {\n  static [entityKind] = \"PgSerial\";\n  getSQLType() {\n    return \"serial\";\n  }\n}\nfunction serial(name) {\n  return new PgSerialBuilder(name ?? \"\");\n}\nexport {\n  PgSerial,\n  PgSerialBuilder,\n  serial\n};\n//# sourceMappingURL=serial.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgIntColumnBaseBuilder } from \"./int.common.js\";\nclass PgSmallIntBuilder extends PgIntColumnBaseBuilder {\n  static [entityKind] = \"PgSmallIntBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"PgSmallInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new PgSmallInt(table, this.config);\n  }\n}\nclass PgSmallInt extends PgColumn {\n  static [entityKind] = \"PgSmallInt\";\n  getSQLType() {\n    return \"smallint\";\n  }\n  mapFromDriverValue = (value) => {\n    if (typeof value === \"string\") {\n      return Number(value);\n    }\n    return value;\n  };\n}\nfunction smallint(name) {\n  return new PgSmallIntBuilder(name ?? \"\");\n}\nexport {\n  PgSmallInt,\n  PgSmallIntBuilder,\n  smallint\n};\n//# sourceMappingURL=smallint.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgSmallSerialBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgSmallSerialBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"PgSmallSerial\");\n    this.config.hasDefault = true;\n    this.config.notNull = true;\n  }\n  /** @internal */\n  build(table) {\n    return new PgSmallSerial(\n      table,\n      this.config\n    );\n  }\n}\nclass PgSmallSerial extends PgColumn {\n  static [entityKind] = \"PgSmallSerial\";\n  getSQLType() {\n    return \"smallserial\";\n  }\n}\nfunction smallserial(name) {\n  return new PgSmallSerialBuilder(name ?? \"\");\n}\nexport {\n  PgSmallSerial,\n  PgSmallSerialBuilder,\n  smallserial\n};\n//# sourceMappingURL=smallserial.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgTextBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgTextBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"PgText\");\n    this.config.enumValues = config.enum;\n  }\n  /** @internal */\n  build(table) {\n    return new PgText(table, this.config);\n  }\n}\nclass PgText extends PgColumn {\n  static [entityKind] = \"PgText\";\n  enumValues = this.config.enumValues;\n  getSQLType() {\n    return \"text\";\n  }\n}\nfunction text(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgTextBuilder(name, config);\n}\nexport {\n  PgText,\n  PgTextBuilder,\n  text\n};\n//# sourceMappingURL=text.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgDateColumnBaseBuilder } from \"./date.common.js\";\nclass PgTimeBuilder extends PgDateColumnBaseBuilder {\n  constructor(name, withTimezone, precision) {\n    super(name, \"string\", \"PgTime\");\n    this.withTimezone = withTimezone;\n    this.precision = precision;\n    this.config.withTimezone = withTimezone;\n    this.config.precision = precision;\n  }\n  static [entityKind] = \"PgTimeBuilder\";\n  /** @internal */\n  build(table) {\n    return new PgTime(table, this.config);\n  }\n}\nclass PgTime extends PgColumn {\n  static [entityKind] = \"PgTime\";\n  withTimezone;\n  precision;\n  constructor(table, config) {\n    super(table, config);\n    this.withTimezone = config.withTimezone;\n    this.precision = config.precision;\n  }\n  getSQLType() {\n    const precision = this.precision === void 0 ? \"\" : `(${this.precision})`;\n    return `time${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n  }\n}\nfunction time(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\nexport {\n  PgTime,\n  PgTimeBuilder,\n  time\n};\n//# sourceMappingURL=time.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn } from \"./common.js\";\nimport { PgDateColumnBaseBuilder } from \"./date.common.js\";\nclass PgTimestampBuilder extends PgDateColumnBaseBuilder {\n  static [entityKind] = \"PgTimestampBuilder\";\n  constructor(name, withTimezone, precision) {\n    super(name, \"date\", \"PgTimestamp\");\n    this.config.withTimezone = withTimezone;\n    this.config.precision = precision;\n  }\n  /** @internal */\n  build(table) {\n    return new PgTimestamp(table, this.config);\n  }\n}\nclass PgTimestamp extends PgColumn {\n  static [entityKind] = \"PgTimestamp\";\n  withTimezone;\n  precision;\n  constructor(table, config) {\n    super(table, config);\n    this.withTimezone = config.withTimezone;\n    this.precision = config.precision;\n  }\n  getSQLType() {\n    const precision = this.precision === void 0 ? \"\" : ` (${this.precision})`;\n    return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n  }\n  mapFromDriverValue = (value) => {\n    return new Date(this.withTimezone ? value : value + \"+0000\");\n  };\n  mapToDriverValue = (value) => {\n    return value.toISOString();\n  };\n}\nclass PgTimestampStringBuilder extends PgDateColumnBaseBuilder {\n  static [entityKind] = \"PgTimestampStringBuilder\";\n  constructor(name, withTimezone, precision) {\n    super(name, \"string\", \"PgTimestampString\");\n    this.config.withTimezone = withTimezone;\n    this.config.precision = precision;\n  }\n  /** @internal */\n  build(table) {\n    return new PgTimestampString(\n      table,\n      this.config\n    );\n  }\n}\nclass PgTimestampString extends PgColumn {\n  static [entityKind] = \"PgTimestampString\";\n  withTimezone;\n  precision;\n  constructor(table, config) {\n    super(table, config);\n    this.withTimezone = config.withTimezone;\n    this.precision = config.precision;\n  }\n  getSQLType() {\n    const precision = this.precision === void 0 ? \"\" : `(${this.precision})`;\n    return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n  }\n}\nfunction timestamp(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"string\") {\n    return new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n  }\n  return new PgTimestampBuilder(name, config?.withTimezone ?? false, config?.precision);\n}\nexport {\n  PgTimestamp,\n  PgTimestampBuilder,\n  PgTimestampString,\n  PgTimestampStringBuilder,\n  timestamp\n};\n//# sourceMappingURL=timestamp.js.map","import { entityKind } from \"../../entity.js\";\nimport { sql } from \"../../sql/sql.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgUUIDBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgUUIDBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"PgUUID\");\n  }\n  /**\n   * Adds `default gen_random_uuid()` to the column definition.\n   */\n  defaultRandom() {\n    return this.default(sql`gen_random_uuid()`);\n  }\n  /** @internal */\n  build(table) {\n    return new PgUUID(table, this.config);\n  }\n}\nclass PgUUID extends PgColumn {\n  static [entityKind] = \"PgUUID\";\n  getSQLType() {\n    return \"uuid\";\n  }\n}\nfunction uuid(name) {\n  return new PgUUIDBuilder(name ?? \"\");\n}\nexport {\n  PgUUID,\n  PgUUIDBuilder,\n  uuid\n};\n//# sourceMappingURL=uuid.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgVarcharBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgVarcharBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"PgVarchar\");\n    this.config.length = config.length;\n    this.config.enumValues = config.enum;\n  }\n  /** @internal */\n  build(table) {\n    return new PgVarchar(\n      table,\n      this.config\n    );\n  }\n}\nclass PgVarchar extends PgColumn {\n  static [entityKind] = \"PgVarchar\";\n  length = this.config.length;\n  enumValues = this.config.enumValues;\n  getSQLType() {\n    return this.length === void 0 ? `varchar` : `varchar(${this.length})`;\n  }\n}\nfunction varchar(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgVarcharBuilder(name, config);\n}\nexport {\n  PgVarchar,\n  PgVarcharBuilder,\n  varchar\n};\n//# sourceMappingURL=varchar.js.map","import { entityKind } from \"../../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"../common.js\";\nclass PgBinaryVectorBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgBinaryVectorBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"PgBinaryVector\");\n    this.config.dimensions = config.dimensions;\n  }\n  /** @internal */\n  build(table) {\n    return new PgBinaryVector(\n      table,\n      this.config\n    );\n  }\n}\nclass PgBinaryVector extends PgColumn {\n  static [entityKind] = \"PgBinaryVector\";\n  dimensions = this.config.dimensions;\n  getSQLType() {\n    return `bit(${this.dimensions})`;\n  }\n}\nfunction bit(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgBinaryVectorBuilder(name, config);\n}\nexport {\n  PgBinaryVector,\n  PgBinaryVectorBuilder,\n  bit\n};\n//# sourceMappingURL=bit.js.map","import { entityKind } from \"../../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"../common.js\";\nclass PgHalfVectorBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgHalfVectorBuilder\";\n  constructor(name, config) {\n    super(name, \"array\", \"PgHalfVector\");\n    this.config.dimensions = config.dimensions;\n  }\n  /** @internal */\n  build(table) {\n    return new PgHalfVector(\n      table,\n      this.config\n    );\n  }\n}\nclass PgHalfVector extends PgColumn {\n  static [entityKind] = \"PgHalfVector\";\n  dimensions = this.config.dimensions;\n  getSQLType() {\n    return `halfvec(${this.dimensions})`;\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n  mapFromDriverValue(value) {\n    return value.slice(1, -1).split(\",\").map((v) => Number.parseFloat(v));\n  }\n}\nfunction halfvec(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgHalfVectorBuilder(name, config);\n}\nexport {\n  PgHalfVector,\n  PgHalfVectorBuilder,\n  halfvec\n};\n//# sourceMappingURL=halfvec.js.map","import { entityKind } from \"../../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"../common.js\";\nclass PgSparseVectorBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgSparseVectorBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"PgSparseVector\");\n    this.config.dimensions = config.dimensions;\n  }\n  /** @internal */\n  build(table) {\n    return new PgSparseVector(\n      table,\n      this.config\n    );\n  }\n}\nclass PgSparseVector extends PgColumn {\n  static [entityKind] = \"PgSparseVector\";\n  dimensions = this.config.dimensions;\n  getSQLType() {\n    return `sparsevec(${this.dimensions})`;\n  }\n}\nfunction sparsevec(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgSparseVectorBuilder(name, config);\n}\nexport {\n  PgSparseVector,\n  PgSparseVectorBuilder,\n  sparsevec\n};\n//# sourceMappingURL=sparsevec.js.map","import { entityKind } from \"../../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../../utils.js\";\nimport { PgColumn, PgColumnBuilder } from \"../common.js\";\nclass PgVectorBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgVectorBuilder\";\n  constructor(name, config) {\n    super(name, \"array\", \"PgVector\");\n    this.config.dimensions = config.dimensions;\n  }\n  /** @internal */\n  build(table) {\n    return new PgVector(\n      table,\n      this.config\n    );\n  }\n}\nclass PgVector extends PgColumn {\n  static [entityKind] = \"PgVector\";\n  dimensions = this.config.dimensions;\n  getSQLType() {\n    return `vector(${this.dimensions})`;\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n  mapFromDriverValue(value) {\n    return value.slice(1, -1).split(\",\").map((v) => Number.parseFloat(v));\n  }\n}\nfunction vector(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  return new PgVectorBuilder(name, config);\n}\nexport {\n  PgVector,\n  PgVectorBuilder,\n  vector\n};\n//# sourceMappingURL=vector.js.map","import { bigint } from \"./bigint.js\";\nimport { bigserial } from \"./bigserial.js\";\nimport { boolean } from \"./boolean.js\";\nimport { char } from \"./char.js\";\nimport { cidr } from \"./cidr.js\";\nimport { customType } from \"./custom.js\";\nimport { date } from \"./date.js\";\nimport { doublePrecision } from \"./double-precision.js\";\nimport { inet } from \"./inet.js\";\nimport { integer } from \"./integer.js\";\nimport { interval } from \"./interval.js\";\nimport { json } from \"./json.js\";\nimport { jsonb } from \"./jsonb.js\";\nimport { line } from \"./line.js\";\nimport { macaddr } from \"./macaddr.js\";\nimport { macaddr8 } from \"./macaddr8.js\";\nimport { numeric } from \"./numeric.js\";\nimport { point } from \"./point.js\";\nimport { geometry } from \"./postgis_extension/geometry.js\";\nimport { real } from \"./real.js\";\nimport { serial } from \"./serial.js\";\nimport { smallint } from \"./smallint.js\";\nimport { smallserial } from \"./smallserial.js\";\nimport { text } from \"./text.js\";\nimport { time } from \"./time.js\";\nimport { timestamp } from \"./timestamp.js\";\nimport { uuid } from \"./uuid.js\";\nimport { varchar } from \"./varchar.js\";\nimport { bit } from \"./vector_extension/bit.js\";\nimport { halfvec } from \"./vector_extension/halfvec.js\";\nimport { sparsevec } from \"./vector_extension/sparsevec.js\";\nimport { vector } from \"./vector_extension/vector.js\";\nfunction getPgColumnBuilders() {\n  return {\n    bigint,\n    bigserial,\n    boolean,\n    char,\n    cidr,\n    customType,\n    date,\n    doublePrecision,\n    inet,\n    integer,\n    interval,\n    json,\n    jsonb,\n    line,\n    macaddr,\n    macaddr8,\n    numeric,\n    point,\n    geometry,\n    real,\n    serial,\n    smallint,\n    smallserial,\n    text,\n    time,\n    timestamp,\n    uuid,\n    varchar,\n    bit,\n    halfvec,\n    sparsevec,\n    vector\n  };\n}\nexport {\n  getPgColumnBuilders\n};\n//# sourceMappingURL=all.js.map","import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getPgColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nconst EnableRLS = Symbol.for(\"drizzle:EnableRLS\");\nclass PgTable extends Table {\n  static [entityKind] = \"PgTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys,\n    EnableRLS\n  });\n  /**@internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [EnableRLS] = false;\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n  /** @internal */\n  [Table.Symbol.ExtraConfigColumns] = {};\n}\nfunction pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new PgTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getPgColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const builtColumnsForExtraConfig = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.buildExtraConfigColumn(rawTable);\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n  if (extraConfig) {\n    table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return Object.assign(table, {\n    enableRLS: () => {\n      table[PgTable.Symbol.EnableRLS] = true;\n      return table;\n    }\n  });\n}\nconst pgTable = (name, columns, extraConfig) => {\n  return pgTableWithSchema(name, columns, extraConfig, void 0);\n};\nfunction pgTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return pgTableWithSchema(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  EnableRLS,\n  InlineForeignKeys,\n  PgTable,\n  pgTable,\n  pgTableCreator,\n  pgTableWithSchema\n};\n//# sourceMappingURL=table.js.map","import { entityKind } from \"../entity.js\";\nimport { PgTable } from \"./table.js\";\nfunction primaryKey(...config) {\n  if (config[0].columns) {\n    return new PrimaryKeyBuilder(config[0].columns, config[0].name);\n  }\n  return new PrimaryKeyBuilder(config);\n}\nclass PrimaryKeyBuilder {\n  static [entityKind] = \"PgPrimaryKeyBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  name;\n  constructor(columns, name) {\n    this.columns = columns;\n    this.name = name;\n  }\n  /** @internal */\n  build(table) {\n    return new PrimaryKey(table, this.columns, this.name);\n  }\n}\nclass PrimaryKey {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name;\n  }\n  static [entityKind] = \"PgPrimaryKey\";\n  columns;\n  name;\n  getName() {\n    return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join(\"_\")}_pk`;\n  }\n}\nexport {\n  PrimaryKey,\n  PrimaryKeyBuilder,\n  primaryKey\n};\n//# sourceMappingURL=primary-keys.js.map","import { Column } from \"../../column.js\";\nimport { is } from \"../../entity.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  isDriverValueEncoder,\n  isSQLWrapper,\n  Param,\n  Placeholder,\n  SQL,\n  sql,\n  StringChunk,\n  View\n} from \"../sql.js\";\nfunction bindIfParam(value, column) {\n  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n    return new Param(value, column);\n  }\n  return value;\n}\nconst eq = (left, right) => {\n  return sql`${left} = ${bindIfParam(right, left)}`;\n};\nconst ne = (left, right) => {\n  return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" and \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction or(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" or \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction not(condition) {\n  return sql`not ${condition}`;\n}\nconst gt = (left, right) => {\n  return sql`${left} > ${bindIfParam(right, left)}`;\n};\nconst gte = (left, right) => {\n  return sql`${left} >= ${bindIfParam(right, left)}`;\n};\nconst lt = (left, right) => {\n  return sql`${left} < ${bindIfParam(right, left)}`;\n};\nconst lte = (left, right) => {\n  return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`false`;\n    }\n    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`true`;\n    }\n    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} not in ${bindIfParam(values, column)}`;\n}\nfunction isNull(value) {\n  return sql`${value} is null`;\n}\nfunction isNotNull(value) {\n  return sql`${value} is not null`;\n}\nfunction exists(subquery) {\n  return sql`exists ${subquery}`;\n}\nfunction notExists(subquery) {\n  return sql`not exists ${subquery}`;\n}\nfunction between(column, min, max) {\n  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(\n    max,\n    column\n  )}`;\n}\nfunction notBetween(column, min, max) {\n  return sql`${column} not between ${bindIfParam(\n    min,\n    column\n  )} and ${bindIfParam(max, column)}`;\n}\nfunction like(column, value) {\n  return sql`${column} like ${value}`;\n}\nfunction notLike(column, value) {\n  return sql`${column} not like ${value}`;\n}\nfunction ilike(column, value) {\n  return sql`${column} ilike ${value}`;\n}\nfunction notIlike(column, value) {\n  return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContains requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} @> ${array}`;\n  }\n  return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContained requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} <@ ${array}`;\n  }\n  return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayOverlaps requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} && ${array}`;\n  }\n  return sql`${column} && ${bindIfParam(values, column)}`;\n}\nexport {\n  and,\n  arrayContained,\n  arrayContains,\n  arrayOverlaps,\n  between,\n  bindIfParam,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n};\n//# sourceMappingURL=conditions.js.map","import { sql } from \"../sql.js\";\nfunction asc(column) {\n  return sql`${column} asc`;\n}\nfunction desc(column) {\n  return sql`${column} desc`;\n}\nexport {\n  asc,\n  desc\n};\n//# sourceMappingURL=select.js.map","import { getTableUniqueName, Table } from \"./table.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { PrimaryKeyBuilder } from \"./pg-core/primary-keys.js\";\nimport {\n  and,\n  asc,\n  between,\n  desc,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n} from \"./sql/expressions/index.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nclass Relation {\n  constructor(sourceTable, referencedTable, relationName) {\n    this.sourceTable = sourceTable;\n    this.referencedTable = referencedTable;\n    this.relationName = relationName;\n    this.referencedTableName = referencedTable[Table.Symbol.Name];\n  }\n  static [entityKind] = \"Relation\";\n  referencedTableName;\n  fieldName;\n}\nclass Relations {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n  }\n  static [entityKind] = \"Relations\";\n}\nclass One extends Relation {\n  constructor(sourceTable, referencedTable, config, isNullable) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n    this.isNullable = isNullable;\n  }\n  static [entityKind] = \"One\";\n  withFieldName(fieldName) {\n    const relation = new One(\n      this.sourceTable,\n      this.referencedTable,\n      this.config,\n      this.isNullable\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nclass Many extends Relation {\n  constructor(sourceTable, referencedTable, config) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n  }\n  static [entityKind] = \"Many\";\n  withFieldName(fieldName) {\n    const relation = new Many(\n      this.sourceTable,\n      this.referencedTable,\n      this.config\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nfunction getOperators() {\n  return {\n    and,\n    between,\n    eq,\n    exists,\n    gt,\n    gte,\n    ilike,\n    inArray,\n    isNull,\n    isNotNull,\n    like,\n    lt,\n    lte,\n    ne,\n    not,\n    notBetween,\n    notExists,\n    notLike,\n    notIlike,\n    notInArray,\n    or,\n    sql\n  };\n}\nfunction getOrderByOperators() {\n  return {\n    sql,\n    asc,\n    desc\n  };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n  if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n    schema = schema[\"default\"];\n  }\n  const tableNamesMap = {};\n  const relationsBuffer = {};\n  const tablesConfig = {};\n  for (const [key, value] of Object.entries(schema)) {\n    if (is(value, Table)) {\n      const dbName = getTableUniqueName(value);\n      const bufferedRelations = relationsBuffer[dbName];\n      tableNamesMap[dbName] = key;\n      tablesConfig[key] = {\n        tsName: key,\n        dbName: value[Table.Symbol.Name],\n        schema: value[Table.Symbol.Schema],\n        columns: value[Table.Symbol.Columns],\n        relations: bufferedRelations?.relations ?? {},\n        primaryKey: bufferedRelations?.primaryKey ?? []\n      };\n      for (const column of Object.values(\n        value[Table.Symbol.Columns]\n      )) {\n        if (column.primary) {\n          tablesConfig[key].primaryKey.push(column);\n        }\n      }\n      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value[Table.Symbol.ExtraConfigColumns]);\n      if (extraConfig) {\n        for (const configEntry of Object.values(extraConfig)) {\n          if (is(configEntry, PrimaryKeyBuilder)) {\n            tablesConfig[key].primaryKey.push(...configEntry.columns);\n          }\n        }\n      }\n    } else if (is(value, Relations)) {\n      const dbName = getTableUniqueName(value.table);\n      const tableName = tableNamesMap[dbName];\n      const relations2 = value.config(\n        configHelpers(value.table)\n      );\n      let primaryKey;\n      for (const [relationName, relation] of Object.entries(relations2)) {\n        if (tableName) {\n          const tableConfig = tablesConfig[tableName];\n          tableConfig.relations[relationName] = relation;\n          if (primaryKey) {\n            tableConfig.primaryKey.push(...primaryKey);\n          }\n        } else {\n          if (!(dbName in relationsBuffer)) {\n            relationsBuffer[dbName] = {\n              relations: {},\n              primaryKey\n            };\n          }\n          relationsBuffer[dbName].relations[relationName] = relation;\n        }\n      }\n    }\n  }\n  return { tables: tablesConfig, tableNamesMap };\n}\nfunction relations(table, relations2) {\n  return new Relations(\n    table,\n    (helpers) => Object.fromEntries(\n      Object.entries(relations2(helpers)).map(([key, value]) => [\n        key,\n        value.withFieldName(key)\n      ])\n    )\n  );\n}\nfunction createOne(sourceTable) {\n  return function one(table, config) {\n    return new One(\n      sourceTable,\n      table,\n      config,\n      config?.fields.reduce((res, f) => res && f.notNull, true) ?? false\n    );\n  };\n}\nfunction createMany(sourceTable) {\n  return function many(referencedTable, config) {\n    return new Many(sourceTable, referencedTable, config);\n  };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n  if (is(relation, One) && relation.config) {\n    return {\n      fields: relation.config.fields,\n      references: relation.config.references\n    };\n  }\n  const referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n  if (!referencedTableTsName) {\n    throw new Error(\n      `Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const referencedTableConfig = schema[referencedTableTsName];\n  if (!referencedTableConfig) {\n    throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n  }\n  const sourceTable = relation.sourceTable;\n  const sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n  if (!sourceTableTsName) {\n    throw new Error(\n      `Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const reverseRelations = [];\n  for (const referencedTableRelation of Object.values(\n    referencedTableConfig.relations\n  )) {\n    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n      reverseRelations.push(referencedTableRelation);\n    }\n  }\n  if (reverseRelations.length > 1) {\n    throw relation.relationName ? new Error(\n      `There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`\n    ) : new Error(\n      `There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`\n    );\n  }\n  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n    return {\n      fields: reverseRelations[0].config.references,\n      references: reverseRelations[0].config.fields\n    };\n  }\n  throw new Error(\n    `There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`\n  );\n}\nfunction createTableRelationsHelpers(sourceTable) {\n  return {\n    one: createOne(sourceTable),\n    many: createMany(sourceTable)\n  };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {\n  const result = {};\n  for (const [\n    selectionItemIndex,\n    selectionItem\n  ] of buildQueryResultSelection.entries()) {\n    if (selectionItem.isJson) {\n      const relation = tableConfig.relations[selectionItem.tsKey];\n      const rawSubRows = row[selectionItemIndex];\n      const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(\n        tablesConfig,\n        tablesConfig[selectionItem.relationTableTsKey],\n        subRows,\n        selectionItem.selection,\n        mapColumnValue\n      ) : subRows.map(\n        (subRow) => mapRelationalRow(\n          tablesConfig,\n          tablesConfig[selectionItem.relationTableTsKey],\n          subRow,\n          selectionItem.selection,\n          mapColumnValue\n        )\n      );\n    } else {\n      const value = mapColumnValue(row[selectionItemIndex]);\n      const field = selectionItem.field;\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n    }\n  }\n  return result;\n}\nexport {\n  Many,\n  One,\n  Relation,\n  Relations,\n  createMany,\n  createOne,\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig,\n  getOperators,\n  getOrderByOperators,\n  mapRelationalRow,\n  normalizeRelation,\n  relations\n};\n//# sourceMappingURL=relations.js.map","import { entityKind } from \"../entity.js\";\nimport { View } from \"../sql/sql.js\";\nclass PgViewBase extends View {\n  static [entityKind] = \"PgViewBase\";\n}\nexport {\n  PgViewBase\n};\n//# sourceMappingURL=view-base.js.map","import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from \"../alias.js\";\nimport { CasingCache } from \"../casing.js\";\nimport { Column } from \"../column.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { DrizzleError } from \"../errors.js\";\nimport {\n  PgColumn,\n  PgDate,\n  PgDateString,\n  PgJson,\n  PgJsonb,\n  PgNumeric,\n  PgTime,\n  PgTimestamp,\n  PgTimestampString,\n  PgUUID\n} from \"./columns/index.js\";\nimport { PgTable } from \"./table.js\";\nimport {\n  getOperators,\n  getOrderByOperators,\n  Many,\n  normalizeRelation,\n  One\n} from \"../relations.js\";\nimport { and, eq, View } from \"../sql/index.js\";\nimport {\n  Param,\n  SQL,\n  sql\n} from \"../sql/sql.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { getTableName, getTableUniqueName, Table } from \"../table.js\";\nimport { orderSelectedFields } from \"../utils.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { PgViewBase } from \"./view-base.js\";\nclass PgDialect {\n  static [entityKind] = \"PgDialect\";\n  /** @internal */\n  casing;\n  constructor(config) {\n    this.casing = new CasingCache(config?.casing);\n  }\n  async migrate(migrations, session, config) {\n    const migrationsTable = typeof config === \"string\" ? \"__drizzle_migrations\" : config.migrationsTable ?? \"__drizzle_migrations\";\n    const migrationsSchema = typeof config === \"string\" ? \"drizzle\" : config.migrationsSchema ?? \"drizzle\";\n    const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n    await session.execute(sql`CREATE SCHEMA IF NOT EXISTS ${sql.identifier(migrationsSchema)}`);\n    await session.execute(migrationTableCreate);\n    const dbMigrations = await session.all(\n      sql`select id, hash, created_at from ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} order by created_at desc limit 1`\n    );\n    const lastDbMigration = dbMigrations[0];\n    await session.transaction(async (tx) => {\n      for await (const migration of migrations) {\n        if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {\n          for (const stmt of migration.sql) {\n            await tx.execute(sql.raw(stmt));\n          }\n          await tx.execute(\n            sql`insert into ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`\n          );\n        }\n      }\n    });\n  }\n  escapeName(name) {\n    return `\"${name}\"`;\n  }\n  escapeParam(num) {\n    return `$${num + 1}`;\n  }\n  escapeString(str) {\n    return `'${str.replace(/'/g, \"''\")}'`;\n  }\n  buildWithCTE(queries) {\n    if (!queries?.length)\n      return void 0;\n    const withSqlChunks = [sql`with `];\n    for (const [i, w] of queries.entries()) {\n      withSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n      if (i < queries.length - 1) {\n        withSqlChunks.push(sql`, `);\n      }\n    }\n    withSqlChunks.push(sql` `);\n    return sql.join(withSqlChunks);\n  }\n  buildDeleteQuery({ table, where, returning, withList }) {\n    const withSql = this.buildWithCTE(withList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    return sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n  }\n  buildUpdateSet(table, set) {\n    const tableColumns = table[Table.Symbol.Columns];\n    const columnNames = Object.keys(tableColumns).filter(\n      (colName) => set[colName] !== void 0 || tableColumns[colName]?.onUpdateFn !== void 0\n    );\n    const setSize = columnNames.length;\n    return sql.join(columnNames.flatMap((colName, i) => {\n      const col = tableColumns[colName];\n      const value = set[colName] ?? sql.param(col.onUpdateFn(), col);\n      const res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n      if (i < setSize - 1) {\n        return [res, sql.raw(\", \")];\n      }\n      return [res];\n    }));\n  }\n  buildUpdateQuery({ table, set, where, returning, withList, from, joins }) {\n    const withSql = this.buildWithCTE(withList);\n    const tableName = table[PgTable.Symbol.Name];\n    const tableSchema = table[PgTable.Symbol.Schema];\n    const origTableName = table[PgTable.Symbol.OriginalName];\n    const alias = tableName === origTableName ? void 0 : tableName;\n    const tableSql = sql`${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`}`;\n    const setSql = this.buildUpdateSet(table, set);\n    const fromSql = from && sql.join([sql.raw(\" from \"), this.buildFromTable(from)]);\n    const joinsSql = this.buildJoins(joins);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: !from })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    return sql`${withSql}update ${tableSql} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}`;\n  }\n  /**\n   * Builds selection SQL with provided fields/expressions\n   *\n   * Examples:\n   *\n   * `select <selection> from`\n   *\n   * `insert ... returning <selection>`\n   *\n   * If `isSingleTable` is true, then columns won't be prefixed with table name\n   */\n  buildSelection(fields, { isSingleTable = false } = {}) {\n    const columnsLen = fields.length;\n    const chunks = fields.flatMap(({ field }, i) => {\n      const chunk = [];\n      if (is(field, SQL.Aliased) && field.isSelectionField) {\n        chunk.push(sql.identifier(field.fieldAlias));\n      } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n        const query = is(field, SQL.Aliased) ? field.sql : field;\n        if (isSingleTable) {\n          chunk.push(\n            new SQL(\n              query.queryChunks.map((c) => {\n                if (is(c, PgColumn)) {\n                  return sql.identifier(this.casing.getColumnCasing(c));\n                }\n                return c;\n              })\n            )\n          );\n        } else {\n          chunk.push(query);\n        }\n        if (is(field, SQL.Aliased)) {\n          chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n        }\n      } else if (is(field, Column)) {\n        if (isSingleTable) {\n          chunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n        } else {\n          chunk.push(field);\n        }\n      }\n      if (i < columnsLen - 1) {\n        chunk.push(sql`, `);\n      }\n      return chunk;\n    });\n    return sql.join(chunks);\n  }\n  buildJoins(joins) {\n    if (!joins || joins.length === 0) {\n      return void 0;\n    }\n    const joinsArray = [];\n    for (const [index, joinMeta] of joins.entries()) {\n      if (index === 0) {\n        joinsArray.push(sql` `);\n      }\n      const table = joinMeta.table;\n      const lateralSql = joinMeta.lateral ? sql` lateral` : void 0;\n      const onSql = joinMeta.on ? sql` on ${joinMeta.on}` : void 0;\n      if (is(table, PgTable)) {\n        const tableName = table[PgTable.Symbol.Name];\n        const tableSchema = table[PgTable.Symbol.Schema];\n        const origTableName = table[PgTable.Symbol.OriginalName];\n        const alias = tableName === origTableName ? void 0 : joinMeta.alias;\n        joinsArray.push(\n          sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`\n        );\n      } else if (is(table, View)) {\n        const viewName = table[ViewBaseConfig].name;\n        const viewSchema = table[ViewBaseConfig].schema;\n        const origViewName = table[ViewBaseConfig].originalName;\n        const alias = viewName === origViewName ? void 0 : joinMeta.alias;\n        joinsArray.push(\n          sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? sql`${sql.identifier(viewSchema)}.` : void 0}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`\n        );\n      } else {\n        joinsArray.push(\n          sql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table}${onSql}`\n        );\n      }\n      if (index < joins.length - 1) {\n        joinsArray.push(sql` `);\n      }\n    }\n    return sql.join(joinsArray);\n  }\n  buildFromTable(table) {\n    if (is(table, Table) && table[Table.Symbol.IsAlias]) {\n      let fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n      if (table[Table.Symbol.Schema]) {\n        fullName = sql`${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;\n      }\n      return sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n    }\n    return table;\n  }\n  buildSelectQuery({\n    withList,\n    fields,\n    fieldsFlat,\n    where,\n    having,\n    table,\n    joins,\n    orderBy,\n    groupBy,\n    limit,\n    offset,\n    lockingClause,\n    distinct,\n    setOperators\n  }) {\n    const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n    for (const f of fieldsList) {\n      if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table._.alias : is(table, PgViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(\n        ({ alias }) => alias === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])\n      ))(f.field.table)) {\n        const tableName = getTableName(f.field.table);\n        throw new Error(\n          `Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`\n        );\n      }\n    }\n    const isSingleTable = !joins || joins.length === 0;\n    const withSql = this.buildWithCTE(withList);\n    let distinctSql;\n    if (distinct) {\n      distinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, sql`, `)})`;\n    }\n    const selection = this.buildSelection(fieldsList, { isSingleTable });\n    const tableSql = this.buildFromTable(table);\n    const joinsSql = this.buildJoins(joins);\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const havingSql = having ? sql` having ${having}` : void 0;\n    let orderBySql;\n    if (orderBy && orderBy.length > 0) {\n      orderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n    }\n    let groupBySql;\n    if (groupBy && groupBy.length > 0) {\n      groupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n    }\n    const limitSql = typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    const lockingClauseSql = sql.empty();\n    if (lockingClause) {\n      const clauseSql = sql` for ${sql.raw(lockingClause.strength)}`;\n      if (lockingClause.config.of) {\n        clauseSql.append(\n          sql` of ${sql.join(\n            Array.isArray(lockingClause.config.of) ? lockingClause.config.of : [lockingClause.config.of],\n            sql`, `\n          )}`\n        );\n      }\n      if (lockingClause.config.noWait) {\n        clauseSql.append(sql` nowait`);\n      } else if (lockingClause.config.skipLocked) {\n        clauseSql.append(sql` skip locked`);\n      }\n      lockingClauseSql.append(clauseSql);\n    }\n    const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClauseSql}`;\n    if (setOperators.length > 0) {\n      return this.buildSetOperations(finalQuery, setOperators);\n    }\n    return finalQuery;\n  }\n  buildSetOperations(leftSelect, setOperators) {\n    const [setOperator, ...rest] = setOperators;\n    if (!setOperator) {\n      throw new Error(\"Cannot pass undefined values to any set operator\");\n    }\n    if (rest.length === 0) {\n      return this.buildSetOperationQuery({ leftSelect, setOperator });\n    }\n    return this.buildSetOperations(\n      this.buildSetOperationQuery({ leftSelect, setOperator }),\n      rest\n    );\n  }\n  buildSetOperationQuery({\n    leftSelect,\n    setOperator: { type, isAll, rightSelect, limit, orderBy, offset }\n  }) {\n    const leftChunk = sql`(${leftSelect.getSQL()}) `;\n    const rightChunk = sql`(${rightSelect.getSQL()})`;\n    let orderBySql;\n    if (orderBy && orderBy.length > 0) {\n      const orderByValues = [];\n      for (const singleOrderBy of orderBy) {\n        if (is(singleOrderBy, PgColumn)) {\n          orderByValues.push(sql.identifier(singleOrderBy.name));\n        } else if (is(singleOrderBy, SQL)) {\n          for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n            const chunk = singleOrderBy.queryChunks[i];\n            if (is(chunk, PgColumn)) {\n              singleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n            }\n          }\n          orderByValues.push(sql`${singleOrderBy}`);\n        } else {\n          orderByValues.push(sql`${singleOrderBy}`);\n        }\n      }\n      orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;\n    }\n    const limitSql = typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n    const operatorChunk = sql.raw(`${type} ${isAll ? \"all \" : \"\"}`);\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n  }\n  buildInsertQuery({ table, values: valuesOrSelect, onConflict, returning, withList, select, overridingSystemValue_ }) {\n    const valuesSqlList = [];\n    const columns = table[Table.Symbol.Columns];\n    const colEntries = Object.entries(columns).filter(([_, col]) => !col.shouldDisableInsert());\n    const insertOrder = colEntries.map(\n      ([, column]) => sql.identifier(this.casing.getColumnCasing(column))\n    );\n    if (select) {\n      const select2 = valuesOrSelect;\n      if (is(select2, SQL)) {\n        valuesSqlList.push(select2);\n      } else {\n        valuesSqlList.push(select2.getSQL());\n      }\n    } else {\n      const values = valuesOrSelect;\n      valuesSqlList.push(sql.raw(\"values \"));\n      for (const [valueIndex, value] of values.entries()) {\n        const valueList = [];\n        for (const [fieldName, col] of colEntries) {\n          const colValue = value[fieldName];\n          if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {\n            if (col.defaultFn !== void 0) {\n              const defaultFnResult = col.defaultFn();\n              const defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n              valueList.push(defaultValue);\n            } else if (!col.default && col.onUpdateFn !== void 0) {\n              const onUpdateFnResult = col.onUpdateFn();\n              const newValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n              valueList.push(newValue);\n            } else {\n              valueList.push(sql`default`);\n            }\n          } else {\n            valueList.push(colValue);\n          }\n        }\n        valuesSqlList.push(valueList);\n        if (valueIndex < values.length - 1) {\n          valuesSqlList.push(sql`, `);\n        }\n      }\n    }\n    const withSql = this.buildWithCTE(withList);\n    const valuesSql = sql.join(valuesSqlList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : void 0;\n    const overridingSql = overridingSystemValue_ === true ? sql`overriding system value ` : void 0;\n    return sql`${withSql}insert into ${table} ${insertOrder} ${overridingSql}${valuesSql}${onConflictSql}${returningSql}`;\n  }\n  buildRefreshMaterializedViewQuery({ view, concurrently, withNoData }) {\n    const concurrentlySql = concurrently ? sql` concurrently` : void 0;\n    const withNoDataSql = withNoData ? sql` with no data` : void 0;\n    return sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n  }\n  prepareTyping(encoder) {\n    if (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n      return \"json\";\n    } else if (is(encoder, PgNumeric)) {\n      return \"decimal\";\n    } else if (is(encoder, PgTime)) {\n      return \"time\";\n    } else if (is(encoder, PgTimestamp) || is(encoder, PgTimestampString)) {\n      return \"timestamp\";\n    } else if (is(encoder, PgDate) || is(encoder, PgDateString)) {\n      return \"date\";\n    } else if (is(encoder, PgUUID)) {\n      return \"uuid\";\n    } else {\n      return \"none\";\n    }\n  }\n  sqlToQuery(sql2, invokeSource) {\n    return sql2.toQuery({\n      casing: this.casing,\n      escapeName: this.escapeName,\n      escapeParam: this.escapeParam,\n      escapeString: this.escapeString,\n      prepareTyping: this.prepareTyping,\n      invokeSource\n    });\n  }\n  // buildRelationalQueryWithPK({\n  // \tfullSchema,\n  // \tschema,\n  // \ttableNamesMap,\n  // \ttable,\n  // \ttableConfig,\n  // \tqueryConfig: config,\n  // \ttableAlias,\n  // \tisRoot = false,\n  // \tjoinOn,\n  // }: {\n  // \tfullSchema: Record<string, unknown>;\n  // \tschema: TablesRelationalConfig;\n  // \ttableNamesMap: Record<string, string>;\n  // \ttable: PgTable;\n  // \ttableConfig: TableRelationalConfig;\n  // \tqueryConfig: true | DBQueryConfig<'many', true>;\n  // \ttableAlias: string;\n  // \tisRoot?: boolean;\n  // \tjoinOn?: SQL;\n  // }): BuildRelationalQueryResult<PgTable, PgColumn> {\n  // \t// For { \"<relation>\": true }, return a table with selection of all columns\n  // \tif (config === true) {\n  // \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n  // \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n  // \t\t\t[key, value],\n  // \t\t) => ({\n  // \t\t\tdbKey: value.name,\n  // \t\t\ttsKey: key,\n  // \t\t\tfield: value as PgColumn,\n  // \t\t\trelationTableTsKey: undefined,\n  // \t\t\tisJson: false,\n  // \t\t\tselection: [],\n  // \t\t}));\n  // \t\treturn {\n  // \t\t\ttableTsKey: tableConfig.tsName,\n  // \t\t\tsql: table,\n  // \t\t\tselection,\n  // \t\t};\n  // \t}\n  // \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n  // \t// let selectionForBuild = selection;\n  // \tconst aliasedColumns = Object.fromEntries(\n  // \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n  // \t);\n  // \tconst aliasedRelations = Object.fromEntries(\n  // \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n  // \t);\n  // \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n  // \tlet where, hasUserDefinedWhere;\n  // \tif (config.where) {\n  // \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n  // \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n  // \t\thasUserDefinedWhere = !!where;\n  // \t}\n  // \twhere = and(joinOn, where);\n  // \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n  // \tlet joins: Join[] = [];\n  // \tlet selectedColumns: string[] = [];\n  // \t// Figure out which columns to select\n  // \tif (config.columns) {\n  // \t\tlet isIncludeMode = false;\n  // \t\tfor (const [field, value] of Object.entries(config.columns)) {\n  // \t\t\tif (value === undefined) {\n  // \t\t\t\tcontinue;\n  // \t\t\t}\n  // \t\t\tif (field in tableConfig.columns) {\n  // \t\t\t\tif (!isIncludeMode && value === true) {\n  // \t\t\t\t\tisIncludeMode = true;\n  // \t\t\t\t}\n  // \t\t\t\tselectedColumns.push(field);\n  // \t\t\t}\n  // \t\t}\n  // \t\tif (selectedColumns.length > 0) {\n  // \t\t\tselectedColumns = isIncludeMode\n  // \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n  // \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n  // \t\t}\n  // \t} else {\n  // \t\t// Select all columns if selection is not specified\n  // \t\tselectedColumns = Object.keys(tableConfig.columns);\n  // \t}\n  // \t// for (const field of selectedColumns) {\n  // \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n  // \t// \tfieldsSelection.push({ tsKey: field, value: column });\n  // \t// }\n  // \tlet initiallySelectedRelations: {\n  // \t\ttsKey: string;\n  // \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n  // \t\trelation: Relation;\n  // \t}[] = [];\n  // \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n  // \t// Figure out which relations to select\n  // \tif (config.with) {\n  // \t\tinitiallySelectedRelations = Object.entries(config.with)\n  // \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n  // \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n  // \t}\n  // \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n  // \t\tis(r.relation, Many)\n  // \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n  // \t);\n  // \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n  // \tconst isInnermostQuery = manyRelations.length < 2;\n  // \tconst selectedExtras: {\n  // \t\ttsKey: string;\n  // \t\tvalue: SQL.Aliased;\n  // \t}[] = [];\n  // \t// Figure out which extras to select\n  // \tif (isInnermostQuery && config.extras) {\n  // \t\tconst extras = typeof config.extras === 'function'\n  // \t\t\t? config.extras(aliasedFields, { sql })\n  // \t\t\t: config.extras;\n  // \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n  // \t\t\tselectedExtras.push({\n  // \t\t\t\ttsKey,\n  // \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n  // \t\t\t});\n  // \t\t}\n  // \t}\n  // \t// Transform `fieldsSelection` into `selection`\n  // \t// `fieldsSelection` shouldn't be used after this point\n  // \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n  // \t// \tselection.push({\n  // \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n  // \t// \t\ttsKey,\n  // \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n  // \t// \t\trelationTableTsKey: undefined,\n  // \t// \t\tisJson: false,\n  // \t// \t\tisExtra,\n  // \t// \t\tselection: [],\n  // \t// \t});\n  // \t// }\n  // \tlet orderByOrig = typeof config.orderBy === 'function'\n  // \t\t? config.orderBy(aliasedFields, orderByOperators)\n  // \t\t: config.orderBy ?? [];\n  // \tif (!Array.isArray(orderByOrig)) {\n  // \t\torderByOrig = [orderByOrig];\n  // \t}\n  // \tconst orderBy = orderByOrig.map((orderByValue) => {\n  // \t\tif (is(orderByValue, Column)) {\n  // \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n  // \t\t}\n  // \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n  // \t});\n  // \tconst limit = isInnermostQuery ? config.limit : undefined;\n  // \tconst offset = isInnermostQuery ? config.offset : undefined;\n  // \t// For non-root queries without additional config except columns, return a table with selection\n  // \tif (\n  // \t\t!isRoot\n  // \t\t&& initiallySelectedRelations.length === 0\n  // \t\t&& selectedExtras.length === 0\n  // \t\t&& !where\n  // \t\t&& orderBy.length === 0\n  // \t\t&& limit === undefined\n  // \t\t&& offset === undefined\n  // \t) {\n  // \t\treturn {\n  // \t\t\ttableTsKey: tableConfig.tsName,\n  // \t\t\tsql: table,\n  // \t\t\tselection: selectedColumns.map((key) => ({\n  // \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n  // \t\t\t\ttsKey: key,\n  // \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n  // \t\t\t\trelationTableTsKey: undefined,\n  // \t\t\t\tisJson: false,\n  // \t\t\t\tselection: [],\n  // \t\t\t})),\n  // \t\t};\n  // \t}\n  // \tconst selectedRelationsWithoutPK:\n  // \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n  // \tfor (\n  // \t\tconst {\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tqueryConfig: selectedRelationConfigValue,\n  // \t\t\trelation,\n  // \t\t} of initiallySelectedRelations\n  // \t) {\n  // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n  // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n  // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n  // \t\tconst relationTable = schema[relationTableTsName]!;\n  // \t\tif (relationTable.primaryKey.length > 0) {\n  // \t\t\tcontinue;\n  // \t\t}\n  // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n  // \t\tconst joinOn = and(\n  // \t\t\t...normalizedRelation.fields.map((field, i) =>\n  // \t\t\t\teq(\n  // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n  // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n  // \t\t\t\t)\n  // \t\t\t),\n  // \t\t);\n  // \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n  // \t\t\tfullSchema,\n  // \t\t\tschema,\n  // \t\t\ttableNamesMap,\n  // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n  // \t\t\ttableConfig: schema[relationTableTsName]!,\n  // \t\t\tqueryConfig: selectedRelationConfigValue,\n  // \t\t\ttableAlias: relationTableAlias,\n  // \t\t\tjoinOn,\n  // \t\t\tnestedQueryRelation: relation,\n  // \t\t});\n  // \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n  // \t\tjoins.push({\n  // \t\t\ton: sql`true`,\n  // \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n  // \t\t\talias: relationTableAlias,\n  // \t\t\tjoinType: 'left',\n  // \t\t\tlateral: true,\n  // \t\t});\n  // \t\tselectedRelations.push({\n  // \t\t\tdbKey: selectedRelationTsKey,\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tfield,\n  // \t\t\trelationTableTsKey: relationTableTsName,\n  // \t\t\tisJson: true,\n  // \t\t\tselection: builtRelation.selection,\n  // \t\t});\n  // \t}\n  // \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n  // \t\tis(r.relation, One)\n  // \t);\n  // \t// Process all One relations with PKs, because they can all be joined on the same level\n  // \tfor (\n  // \t\tconst {\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tqueryConfig: selectedRelationConfigValue,\n  // \t\t\trelation,\n  // \t\t} of oneRelations\n  // \t) {\n  // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n  // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n  // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n  // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n  // \t\tconst relationTable = schema[relationTableTsName]!;\n  // \t\tif (relationTable.primaryKey.length === 0) {\n  // \t\t\tcontinue;\n  // \t\t}\n  // \t\tconst joinOn = and(\n  // \t\t\t...normalizedRelation.fields.map((field, i) =>\n  // \t\t\t\teq(\n  // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n  // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n  // \t\t\t\t)\n  // \t\t\t),\n  // \t\t);\n  // \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n  // \t\t\tfullSchema,\n  // \t\t\tschema,\n  // \t\t\ttableNamesMap,\n  // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n  // \t\t\ttableConfig: schema[relationTableTsName]!,\n  // \t\t\tqueryConfig: selectedRelationConfigValue,\n  // \t\t\ttableAlias: relationTableAlias,\n  // \t\t\tjoinOn,\n  // \t\t});\n  // \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n  // \t\t\tsql.join(\n  // \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n  // \t\t\t\t\tis(field, SQL.Aliased)\n  // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n  // \t\t\t\t\t\t: is(field, Column)\n  // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n  // \t\t\t\t\t\t: field\n  // \t\t\t\t),\n  // \t\t\t\tsql`, `,\n  // \t\t\t)\n  // \t\t}) end`.as(selectedRelationTsKey);\n  // \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n  // \t\tjoins.push({\n  // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n  // \t\t\ttable: is(builtRelation.sql, SQL)\n  // \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n  // \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n  // \t\t\talias: relationTableAlias,\n  // \t\t\tjoinType: 'left',\n  // \t\t\tlateral: is(builtRelation.sql, SQL),\n  // \t\t});\n  // \t\tselectedRelations.push({\n  // \t\t\tdbKey: selectedRelationTsKey,\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tfield,\n  // \t\t\trelationTableTsKey: relationTableTsName,\n  // \t\t\tisJson: true,\n  // \t\t\tselection: builtRelation.selection,\n  // \t\t});\n  // \t}\n  // \tlet distinct: PgSelectConfig['distinct'];\n  // \tlet tableFrom: PgTable | Subquery = table;\n  // \t// Process first Many relation - each one requires a nested subquery\n  // \tconst manyRelation = manyRelations[0];\n  // \tif (manyRelation) {\n  // \t\tconst {\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tqueryConfig: selectedRelationQueryConfig,\n  // \t\t\trelation,\n  // \t\t} = manyRelation;\n  // \t\tdistinct = {\n  // \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n  // \t\t};\n  // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n  // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n  // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n  // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n  // \t\tconst joinOn = and(\n  // \t\t\t...normalizedRelation.fields.map((field, i) =>\n  // \t\t\t\teq(\n  // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n  // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n  // \t\t\t\t)\n  // \t\t\t),\n  // \t\t);\n  // \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n  // \t\t\tfullSchema,\n  // \t\t\tschema,\n  // \t\t\ttableNamesMap,\n  // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n  // \t\t\ttableConfig: schema[relationTableTsName]!,\n  // \t\t\tqueryConfig: selectedRelationQueryConfig,\n  // \t\t\ttableAlias: relationTableAlias,\n  // \t\t\tjoinOn,\n  // \t\t});\n  // \t\tconst builtRelationSelectionField = sql`case when ${\n  // \t\t\tsql.identifier(relationTableAlias)\n  // \t\t} is null then '[]' else json_agg(json_build_array(${\n  // \t\t\tsql.join(\n  // \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n  // \t\t\t\t\tis(field, SQL.Aliased)\n  // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n  // \t\t\t\t\t\t: is(field, Column)\n  // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n  // \t\t\t\t\t\t: field\n  // \t\t\t\t),\n  // \t\t\t\tsql`, `,\n  // \t\t\t)\n  // \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n  // \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n  // \t\tjoins.push({\n  // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n  // \t\t\ttable: isLateralJoin\n  // \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n  // \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n  // \t\t\talias: relationTableAlias,\n  // \t\t\tjoinType: 'left',\n  // \t\t\tlateral: isLateralJoin,\n  // \t\t});\n  // \t\t// Build the \"from\" subquery with the remaining Many relations\n  // \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n  // \t\t\tfullSchema,\n  // \t\t\tschema,\n  // \t\t\ttableNamesMap,\n  // \t\t\ttable,\n  // \t\t\ttableConfig,\n  // \t\t\tqueryConfig: {\n  // \t\t\t\t...config,\n  // \t\t\t\twhere: undefined,\n  // \t\t\t\torderBy: undefined,\n  // \t\t\t\tlimit: undefined,\n  // \t\t\t\toffset: undefined,\n  // \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n  // \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n  // \t\t\t\t\t\tresult[tsKey] = configValue;\n  // \t\t\t\t\t\treturn result;\n  // \t\t\t\t\t},\n  // \t\t\t\t\t{},\n  // \t\t\t\t),\n  // \t\t\t},\n  // \t\t\ttableAlias,\n  // \t\t});\n  // \t\tselectedRelations.push({\n  // \t\t\tdbKey: selectedRelationTsKey,\n  // \t\t\ttsKey: selectedRelationTsKey,\n  // \t\t\tfield: builtRelationSelectionField,\n  // \t\t\trelationTableTsKey: relationTableTsName,\n  // \t\t\tisJson: true,\n  // \t\t\tselection: builtRelationJoin.selection,\n  // \t\t});\n  // \t\t// selection = builtTableFrom.selection.map((item) =>\n  // \t\t// \tis(item.field, SQL.Aliased)\n  // \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n  // \t\t// \t\t: item\n  // \t\t// );\n  // \t\t// selectionForBuild = [{\n  // \t\t// \tdbKey: '*',\n  // \t\t// \ttsKey: '*',\n  // \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n  // \t\t// \tselection: [],\n  // \t\t// \tisJson: false,\n  // \t\t// \trelationTableTsKey: undefined,\n  // \t\t// }];\n  // \t\t// const newSelectionItem: (typeof selection)[number] = {\n  // \t\t// \tdbKey: selectedRelationTsKey,\n  // \t\t// \ttsKey: selectedRelationTsKey,\n  // \t\t// \tfield,\n  // \t\t// \trelationTableTsKey: relationTableTsName,\n  // \t\t// \tisJson: true,\n  // \t\t// \tselection: builtRelationJoin.selection,\n  // \t\t// };\n  // \t\t// selection.push(newSelectionItem);\n  // \t\t// selectionForBuild.push(newSelectionItem);\n  // \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n  // \t\t\t? builtTableFrom.sql\n  // \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n  // \t}\n  // \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n  // \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n  // \t}\n  // \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n  // \tfunction prepareSelectedColumns() {\n  // \t\treturn selectedColumns.map((key) => ({\n  // \t\t\tdbKey: tableConfig.columns[key]!.name,\n  // \t\t\ttsKey: key,\n  // \t\t\tfield: tableConfig.columns[key] as PgColumn,\n  // \t\t\trelationTableTsKey: undefined,\n  // \t\t\tisJson: false,\n  // \t\t\tselection: [],\n  // \t\t}));\n  // \t}\n  // \tfunction prepareSelectedExtras() {\n  // \t\treturn selectedExtras.map((item) => ({\n  // \t\t\tdbKey: item.value.fieldAlias,\n  // \t\t\ttsKey: item.tsKey,\n  // \t\t\tfield: item.value,\n  // \t\t\trelationTableTsKey: undefined,\n  // \t\t\tisJson: false,\n  // \t\t\tselection: [],\n  // \t\t}));\n  // \t}\n  // \tif (isRoot) {\n  // \t\tselection = [\n  // \t\t\t...prepareSelectedColumns(),\n  // \t\t\t...prepareSelectedExtras(),\n  // \t\t];\n  // \t}\n  // \tif (hasUserDefinedWhere || orderBy.length > 0) {\n  // \t\ttableFrom = new Subquery(\n  // \t\t\tthis.buildSelectQuery({\n  // \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n  // \t\t\t\tfields: {},\n  // \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n  // \t\t\t\t\tpath: [],\n  // \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n  // \t\t\t\t})),\n  // \t\t\t\tjoins,\n  // \t\t\t\tdistinct,\n  // \t\t\t}),\n  // \t\t\t{},\n  // \t\t\ttableAlias,\n  // \t\t);\n  // \t\tselectionForBuild = selection.map((item) =>\n  // \t\t\tis(item.field, SQL.Aliased)\n  // \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n  // \t\t\t\t: item\n  // \t\t);\n  // \t\tjoins = [];\n  // \t\tdistinct = undefined;\n  // \t}\n  // \tconst result = this.buildSelectQuery({\n  // \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n  // \t\tfields: {},\n  // \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n  // \t\t\tpath: [],\n  // \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n  // \t\t})),\n  // \t\twhere,\n  // \t\tlimit,\n  // \t\toffset,\n  // \t\tjoins,\n  // \t\torderBy,\n  // \t\tdistinct,\n  // \t});\n  // \treturn {\n  // \t\ttableTsKey: tableConfig.tsName,\n  // \t\tsql: result,\n  // \t\tselection,\n  // \t};\n  // }\n  buildRelationalQueryWithoutPK({\n    fullSchema,\n    schema,\n    tableNamesMap,\n    table,\n    tableConfig,\n    queryConfig: config,\n    tableAlias,\n    nestedQueryRelation,\n    joinOn\n  }) {\n    let selection = [];\n    let limit, offset, orderBy = [], where;\n    const joins = [];\n    if (config === true) {\n      const selectionEntries = Object.entries(tableConfig.columns);\n      selection = selectionEntries.map(([key, value]) => ({\n        dbKey: value.name,\n        tsKey: key,\n        field: aliasedTableColumn(value, tableAlias),\n        relationTableTsKey: void 0,\n        isJson: false,\n        selection: []\n      }));\n    } else {\n      const aliasedColumns = Object.fromEntries(\n        Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])\n      );\n      if (config.where) {\n        const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, getOperators()) : config.where;\n        where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n      }\n      const fieldsSelection = [];\n      let selectedColumns = [];\n      if (config.columns) {\n        let isIncludeMode = false;\n        for (const [field, value] of Object.entries(config.columns)) {\n          if (value === void 0) {\n            continue;\n          }\n          if (field in tableConfig.columns) {\n            if (!isIncludeMode && value === true) {\n              isIncludeMode = true;\n            }\n            selectedColumns.push(field);\n          }\n        }\n        if (selectedColumns.length > 0) {\n          selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n        }\n      } else {\n        selectedColumns = Object.keys(tableConfig.columns);\n      }\n      for (const field of selectedColumns) {\n        const column = tableConfig.columns[field];\n        fieldsSelection.push({ tsKey: field, value: column });\n      }\n      let selectedRelations = [];\n      if (config.with) {\n        selectedRelations = Object.entries(config.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n      }\n      let extras;\n      if (config.extras) {\n        extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, { sql }) : config.extras;\n        for (const [tsKey, value] of Object.entries(extras)) {\n          fieldsSelection.push({\n            tsKey,\n            value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n          });\n        }\n      }\n      for (const { tsKey, value } of fieldsSelection) {\n        selection.push({\n          dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n          tsKey,\n          field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n          relationTableTsKey: void 0,\n          isJson: false,\n          selection: []\n        });\n      }\n      let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];\n      if (!Array.isArray(orderByOrig)) {\n        orderByOrig = [orderByOrig];\n      }\n      orderBy = orderByOrig.map((orderByValue) => {\n        if (is(orderByValue, Column)) {\n          return aliasedTableColumn(orderByValue, tableAlias);\n        }\n        return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n      });\n      limit = config.limit;\n      offset = config.offset;\n      for (const {\n        tsKey: selectedRelationTsKey,\n        queryConfig: selectedRelationConfigValue,\n        relation\n      } of selectedRelations) {\n        const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n        const relationTableName = getTableUniqueName(relation.referencedTable);\n        const relationTableTsName = tableNamesMap[relationTableName];\n        const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n        const joinOn2 = and(\n          ...normalizedRelation.fields.map(\n            (field2, i) => eq(\n              aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),\n              aliasedTableColumn(field2, tableAlias)\n            )\n          )\n        );\n        const builtRelation = this.buildRelationalQueryWithoutPK({\n          fullSchema,\n          schema,\n          tableNamesMap,\n          table: fullSchema[relationTableTsName],\n          tableConfig: schema[relationTableTsName],\n          queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,\n          tableAlias: relationTableAlias,\n          joinOn: joinOn2,\n          nestedQueryRelation: relation\n        });\n        const field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier(\"data\")}`.as(selectedRelationTsKey);\n        joins.push({\n          on: sql`true`,\n          table: new Subquery(builtRelation.sql, {}, relationTableAlias),\n          alias: relationTableAlias,\n          joinType: \"left\",\n          lateral: true\n        });\n        selection.push({\n          dbKey: selectedRelationTsKey,\n          tsKey: selectedRelationTsKey,\n          field,\n          relationTableTsKey: relationTableTsName,\n          isJson: true,\n          selection: builtRelation.selection\n        });\n      }\n    }\n    if (selection.length === 0) {\n      throw new DrizzleError({ message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")` });\n    }\n    let result;\n    where = and(joinOn, where);\n    if (nestedQueryRelation) {\n      let field = sql`json_build_array(${sql.join(\n        selection.map(\n          ({ field: field2, tsKey, isJson }) => isJson ? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier(\"data\")}` : is(field2, SQL.Aliased) ? field2.sql : field2\n        ),\n        sql`, `\n      )})`;\n      if (is(nestedQueryRelation, Many)) {\n        field = sql`coalesce(json_agg(${field}${orderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : void 0}), '[]'::json)`;\n      }\n      const nestedSelection = [{\n        dbKey: \"data\",\n        tsKey: \"data\",\n        field: field.as(\"data\"),\n        isJson: true,\n        relationTableTsKey: tableConfig.tsName,\n        selection\n      }];\n      const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;\n      if (needsSubquery) {\n        result = this.buildSelectQuery({\n          table: aliasedTable(table, tableAlias),\n          fields: {},\n          fieldsFlat: [{\n            path: [],\n            field: sql.raw(\"*\")\n          }],\n          where,\n          limit,\n          offset,\n          orderBy,\n          setOperators: []\n        });\n        where = void 0;\n        limit = void 0;\n        offset = void 0;\n        orderBy = [];\n      } else {\n        result = aliasedTable(table, tableAlias);\n      }\n      result = this.buildSelectQuery({\n        table: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n        fields: {},\n        fieldsFlat: nestedSelection.map(({ field: field2 }) => ({\n          path: [],\n          field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    } else {\n      result = this.buildSelectQuery({\n        table: aliasedTable(table, tableAlias),\n        fields: {},\n        fieldsFlat: selection.map(({ field }) => ({\n          path: [],\n          field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    }\n    return {\n      tableTsKey: tableConfig.tsName,\n      sql: result,\n      selection\n    };\n  }\n}\nexport {\n  PgDialect\n};\n//# sourceMappingURL=dialect.js.map","import { entityKind } from \"../entity.js\";\nclass TypedQueryBuilder {\n  static [entityKind] = \"TypedQueryBuilder\";\n  /** @internal */\n  getSelectedFields() {\n    return this._.selectedFields;\n  }\n}\nexport {\n  TypedQueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { PgViewBase } from \"../view-base.js\";\nimport { TypedQueryBuilder } from \"../../query-builders/query-builder.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQL, View } from \"../../sql/sql.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { Table } from \"../../table.js\";\nimport { tracer } from \"../../tracing.js\";\nimport {\n  applyMixins,\n  getTableColumns,\n  getTableLikeName,\n  haveSameKeys\n} from \"../../utils.js\";\nimport { orderSelectedFields } from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nclass PgSelectBuilder {\n  static [entityKind] = \"PgSelectBuilder\";\n  fields;\n  session;\n  dialect;\n  withList = [];\n  distinct;\n  constructor(config) {\n    this.fields = config.fields;\n    this.session = config.session;\n    this.dialect = config.dialect;\n    if (config.withList) {\n      this.withList = config.withList;\n    }\n    this.distinct = config.distinct;\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  /**\n   * Specify the table, subquery, or other target that you're\n   * building a select query against.\n   *\n   * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM | Postgres from documentation}\n   */\n  from(source) {\n    const isPartialSelect = !!this.fields;\n    const src = source;\n    let fields;\n    if (this.fields) {\n      fields = this.fields;\n    } else if (is(src, Subquery)) {\n      fields = Object.fromEntries(\n        Object.keys(src._.selectedFields).map((key) => [key, src[key]])\n      );\n    } else if (is(src, PgViewBase)) {\n      fields = src[ViewBaseConfig].selectedFields;\n    } else if (is(src, SQL)) {\n      fields = {};\n    } else {\n      fields = getTableColumns(src);\n    }\n    return new PgSelectBase({\n      table: src,\n      fields,\n      isPartialSelect,\n      session: this.session,\n      dialect: this.dialect,\n      withList: this.withList,\n      distinct: this.distinct\n    }).setToken(this.authToken);\n  }\n}\nclass PgSelectQueryBuilderBase extends TypedQueryBuilder {\n  static [entityKind] = \"PgSelectQueryBuilder\";\n  _;\n  config;\n  joinsNotNullableMap;\n  tableName;\n  isPartialSelect;\n  session;\n  dialect;\n  constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {\n    super();\n    this.config = {\n      withList,\n      table,\n      fields: { ...fields },\n      distinct,\n      setOperators: []\n    };\n    this.isPartialSelect = isPartialSelect;\n    this.session = session;\n    this.dialect = dialect;\n    this._ = {\n      selectedFields: fields\n    };\n    this.tableName = getTableLikeName(table);\n    this.joinsNotNullableMap = typeof this.tableName === \"string\" ? { [this.tableName]: true } : {};\n  }\n  createJoin(joinType, lateral) {\n    return (table, on) => {\n      const baseTableName = this.tableName;\n      const tableName = getTableLikeName(table);\n      if (typeof tableName === \"string\" && this.config.joins?.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (!this.isPartialSelect) {\n        if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n          this.config.fields = {\n            [baseTableName]: this.config.fields\n          };\n        }\n        if (typeof tableName === \"string\" && !is(table, SQL)) {\n          const selection = is(table, Subquery) ? table._.selectedFields : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n          this.config.fields[tableName] = selection;\n        }\n      }\n      if (typeof on === \"function\") {\n        on = on(\n          new Proxy(\n            this.config.fields,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      if (!this.config.joins) {\n        this.config.joins = [];\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName, lateral });\n      if (typeof tableName === \"string\") {\n        switch (joinType) {\n          case \"left\": {\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n          case \"right\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"cross\":\n          case \"inner\": {\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"full\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n        }\n      }\n      return this;\n    };\n  }\n  /**\n   * Executes a `left join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  leftJoin = this.createJoin(\"left\", false);\n  /**\n   * Executes a `left join lateral` operation by adding subquery to the current query.\n   *\n   * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n   *\n   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join-lateral}\n   *\n   * @param table the subquery to join.\n   * @param on the `on` clause.\n   */\n  leftJoinLateral = this.createJoin(\"left\", true);\n  /**\n   * Executes a `right join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  rightJoin = this.createJoin(\"right\", false);\n  /**\n   * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n   *\n   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  innerJoin = this.createJoin(\"inner\", false);\n  /**\n   * Executes an `inner join lateral` operation, creating a new table by combining rows from two queries that have matching values.\n   *\n   * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n   *\n   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join-lateral}\n   *\n   * @param table the subquery to join.\n   * @param on the `on` clause.\n   */\n  innerJoinLateral = this.createJoin(\"inner\", true);\n  /**\n   * Executes a `full join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  fullJoin = this.createJoin(\"full\", false);\n  /**\n   * Executes a `cross join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}\n   *\n   * @param table the table to join.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users, each user with every pet\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .crossJoin(pets)\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .crossJoin(pets)\n   * ```\n   */\n  crossJoin = this.createJoin(\"cross\", false);\n  /**\n   * Executes a `cross join lateral` operation by combining rows from two queries into a new table.\n   *\n   * A `lateral` join allows the right-hand expression to refer to columns from the left-hand side.\n   *\n   * Calling this method retrieves all rows from both main and joined queries, merging all rows from each query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join-lateral}\n   *\n   * @param table the query to join.\n   */\n  crossJoinLateral = this.createJoin(\"cross\", true);\n  createSetOperator(type, isAll) {\n    return (rightSelection) => {\n      const rightSelect = typeof rightSelection === \"function\" ? rightSelection(getPgSetOperators()) : rightSelection;\n      if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n      this.config.setOperators.push({ type, isAll, rightSelect });\n      return this;\n    };\n  }\n  /**\n   * Adds `union` set operator to the query.\n   *\n   * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all unique names from customers and users tables\n   * await db.select({ name: users.name })\n   *   .from(users)\n   *   .union(\n   *     db.select({ name: customers.name }).from(customers)\n   *   );\n   * // or\n   * import { union } from 'drizzle-orm/pg-core'\n   *\n   * await union(\n   *   db.select({ name: users.name }).from(users),\n   *   db.select({ name: customers.name }).from(customers)\n   * );\n   * ```\n   */\n  union = this.createSetOperator(\"union\", false);\n  /**\n   * Adds `union all` set operator to the query.\n   *\n   * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all transaction ids from both online and in-store sales\n   * await db.select({ transaction: onlineSales.transactionId })\n   *   .from(onlineSales)\n   *   .unionAll(\n   *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   *   );\n   * // or\n   * import { unionAll } from 'drizzle-orm/pg-core'\n   *\n   * await unionAll(\n   *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n   *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   * );\n   * ```\n   */\n  unionAll = this.createSetOperator(\"union\", true);\n  /**\n   * Adds `intersect` set operator to the query.\n   *\n   * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select course names that are offered in both departments A and B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .intersect(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { intersect } from 'drizzle-orm/pg-core'\n   *\n   * await intersect(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  intersect = this.createSetOperator(\"intersect\", false);\n  /**\n   * Adds `intersect all` set operator to the query.\n   *\n   * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all products and quantities that are ordered by both regular and VIP customers\n   * await db.select({\n   *   productId: regularCustomerOrders.productId,\n   *   quantityOrdered: regularCustomerOrders.quantityOrdered\n   * })\n   * .from(regularCustomerOrders)\n   * .intersectAll(\n   *   db.select({\n   *     productId: vipCustomerOrders.productId,\n   *     quantityOrdered: vipCustomerOrders.quantityOrdered\n   *   })\n   *   .from(vipCustomerOrders)\n   * );\n   * // or\n   * import { intersectAll } from 'drizzle-orm/pg-core'\n   *\n   * await intersectAll(\n   *   db.select({\n   *     productId: regularCustomerOrders.productId,\n   *     quantityOrdered: regularCustomerOrders.quantityOrdered\n   *   })\n   *   .from(regularCustomerOrders),\n   *   db.select({\n   *     productId: vipCustomerOrders.productId,\n   *     quantityOrdered: vipCustomerOrders.quantityOrdered\n   *   })\n   *   .from(vipCustomerOrders)\n   * );\n   * ```\n   */\n  intersectAll = this.createSetOperator(\"intersect\", true);\n  /**\n   * Adds `except` set operator to the query.\n   *\n   * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all courses offered in department A but not in department B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .except(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { except } from 'drizzle-orm/pg-core'\n   *\n   * await except(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  except = this.createSetOperator(\"except\", false);\n  /**\n   * Adds `except all` set operator to the query.\n   *\n   * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all products that are ordered by regular customers but not by VIP customers\n   * await db.select({\n   *   productId: regularCustomerOrders.productId,\n   *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n   * })\n   * .from(regularCustomerOrders)\n   * .exceptAll(\n   *   db.select({\n   *     productId: vipCustomerOrders.productId,\n   *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n   *   })\n   *   .from(vipCustomerOrders)\n   * );\n   * // or\n   * import { exceptAll } from 'drizzle-orm/pg-core'\n   *\n   * await exceptAll(\n   *   db.select({\n   *     productId: regularCustomerOrders.productId,\n   *     quantityOrdered: regularCustomerOrders.quantityOrdered\n   *   })\n   *   .from(regularCustomerOrders),\n   *   db.select({\n   *     productId: vipCustomerOrders.productId,\n   *     quantityOrdered: vipCustomerOrders.quantityOrdered\n   *   })\n   *   .from(vipCustomerOrders)\n   * );\n   * ```\n   */\n  exceptAll = this.createSetOperator(\"except\", true);\n  /** @internal */\n  addSetOperators(setOperators) {\n    this.config.setOperators.push(...setOperators);\n    return this;\n  }\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be selected.\n   *\n   * ```ts\n   * // Select all cars with green color\n   * await db.select().from(cars).where(eq(cars.color, 'green'));\n   * // or\n   * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Select all BMW cars with a green color\n   * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Select all cars with the green or blue color\n   * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    if (typeof where === \"function\") {\n      where = where(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.where = where;\n    return this;\n  }\n  /**\n   * Adds a `having` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n   *\n   * @param having the `having` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all brands with more than one car\n   * await db.select({\n   * \tbrand: cars.brand,\n   * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n   * })\n   *   .from(cars)\n   *   .groupBy(cars.brand)\n   *   .having(({ count }) => gt(count, 1));\n   * ```\n   */\n  having(having) {\n    if (typeof having === \"function\") {\n      having = having(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.having = having;\n    return this;\n  }\n  groupBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const groupBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n    } else {\n      this.config.groupBy = columns;\n    }\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    } else {\n      const orderByArray = columns;\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    }\n    return this;\n  }\n  /**\n   * Adds a `limit` clause to the query.\n   *\n   * Calling this method will set the maximum number of rows that will be returned by this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param limit the `limit` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the first 10 people from this query.\n   * await db.select().from(people).limit(10);\n   * ```\n   */\n  limit(limit) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).limit = limit;\n    } else {\n      this.config.limit = limit;\n    }\n    return this;\n  }\n  /**\n   * Adds an `offset` clause to the query.\n   *\n   * Calling this method will skip a number of rows when returning results from this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param offset the `offset` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the 10th-20th people from this query.\n   * await db.select().from(people).offset(10).limit(10);\n   * ```\n   */\n  offset(offset) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).offset = offset;\n    } else {\n      this.config.offset = offset;\n    }\n    return this;\n  }\n  /**\n   * Adds a `for` clause to the query.\n   *\n   * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.\n   *\n   * See docs: {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE}\n   *\n   * @param strength the lock strength.\n   * @param config the lock configuration.\n   */\n  for(strength, config = {}) {\n    this.config.lockingClause = { strength, config };\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildSelectQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  as(alias) {\n    return new Proxy(\n      new Subquery(this.getSQL(), this.config.fields, alias),\n      new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  /** @internal */\n  getSelectedFields() {\n    return new Proxy(\n      this.config.fields,\n      new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  $dynamic() {\n    return this;\n  }\n}\nclass PgSelectBase extends PgSelectQueryBuilderBase {\n  static [entityKind] = \"PgSelect\";\n  /** @internal */\n  _prepare(name) {\n    const { session, config, dialect, joinsNotNullableMap, authToken } = this;\n    if (!session) {\n      throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n    }\n    return tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n      const fieldsList = orderSelectedFields(config.fields);\n      const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name, true);\n      query.joinsNotNullableMap = joinsNotNullableMap;\n      return query.setToken(authToken);\n    });\n  }\n  /**\n   * Create a prepared statement for this query. This allows\n   * the database to remember this query for the given session\n   * and call it by name, rather than specifying the full query.\n   *\n   * {@link https://www.postgresql.org/docs/current/sql-prepare.html | Postgres prepare documentation}\n   */\n  prepare(name) {\n    return this._prepare(name);\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute = (placeholderValues) => {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      return this._prepare().execute(placeholderValues, this.authToken);\n    });\n  };\n}\napplyMixins(PgSelectBase, [QueryPromise]);\nfunction createSetOperator(type, isAll) {\n  return (leftSelect, rightSelect, ...restSelects) => {\n    const setOperators = [rightSelect, ...restSelects].map((select) => ({\n      type,\n      isAll,\n      rightSelect: select\n    }));\n    for (const setOperator of setOperators) {\n      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n    }\n    return leftSelect.addSetOperators(setOperators);\n  };\n}\nconst getPgSetOperators = () => ({\n  union,\n  unionAll,\n  intersect,\n  intersectAll,\n  except,\n  exceptAll\n});\nconst union = createSetOperator(\"union\", false);\nconst unionAll = createSetOperator(\"union\", true);\nconst intersect = createSetOperator(\"intersect\", false);\nconst intersectAll = createSetOperator(\"intersect\", true);\nconst except = createSetOperator(\"except\", false);\nconst exceptAll = createSetOperator(\"except\", true);\nexport {\n  PgSelectBase,\n  PgSelectBuilder,\n  PgSelectQueryBuilderBase,\n  except,\n  exceptAll,\n  intersect,\n  intersectAll,\n  union,\n  unionAll\n};\n//# sourceMappingURL=select.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { PgDialect } from \"../dialect.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { WithSubquery } from \"../../subquery.js\";\nimport { PgSelectBuilder } from \"./select.js\";\nclass QueryBuilder {\n  static [entityKind] = \"PgQueryBuilder\";\n  dialect;\n  dialectConfig;\n  constructor(dialect) {\n    this.dialect = is(dialect, PgDialect) ? dialect : void 0;\n    this.dialectConfig = is(dialect, PgDialect) ? void 0 : dialect;\n  }\n  $with = (alias, selection) => {\n    const queryBuilder = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(queryBuilder);\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        distinct: true\n      });\n    }\n    function selectDistinctOn(on, fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        distinct: { on }\n      });\n    }\n    return { select, selectDistinct, selectDistinctOn };\n  }\n  select(fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: void 0,\n      dialect: this.getDialect()\n    });\n  }\n  selectDistinct(fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: void 0,\n      dialect: this.getDialect(),\n      distinct: true\n    });\n  }\n  selectDistinctOn(on, fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: void 0,\n      dialect: this.getDialect(),\n      distinct: { on }\n    });\n  }\n  // Lazy load dialect to avoid circular dependency\n  getDialect() {\n    if (!this.dialect) {\n      this.dialect = new PgDialect(this.dialectConfig);\n    }\n    return this.dialect;\n  }\n}\nexport {\n  QueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { Param, SQL, sql } from \"../../sql/sql.js\";\nimport { Columns, getTableName, Table } from \"../../table.js\";\nimport { tracer } from \"../../tracing.js\";\nimport { haveSameKeys, mapUpdateSet, orderSelectedFields } from \"../../utils.js\";\nimport { QueryBuilder } from \"./query-builder.js\";\nclass PgInsertBuilder {\n  constructor(table, session, dialect, withList, overridingSystemValue_) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n    this.overridingSystemValue_ = overridingSystemValue_;\n  }\n  static [entityKind] = \"PgInsertBuilder\";\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  overridingSystemValue() {\n    this.overridingSystemValue_ = true;\n    return this;\n  }\n  values(values) {\n    values = Array.isArray(values) ? values : [values];\n    if (values.length === 0) {\n      throw new Error(\"values() must be called with at least one value\");\n    }\n    const mappedValues = values.map((entry) => {\n      const result = {};\n      const cols = this.table[Table.Symbol.Columns];\n      for (const colKey of Object.keys(entry)) {\n        const colValue = entry[colKey];\n        result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n      }\n      return result;\n    });\n    return new PgInsertBase(\n      this.table,\n      mappedValues,\n      this.session,\n      this.dialect,\n      this.withList,\n      false,\n      this.overridingSystemValue_\n    ).setToken(this.authToken);\n  }\n  select(selectQuery) {\n    const select = typeof selectQuery === \"function\" ? selectQuery(new QueryBuilder()) : selectQuery;\n    if (!is(select, SQL) && !haveSameKeys(this.table[Columns], select._.selectedFields)) {\n      throw new Error(\n        \"Insert select error: selected fields are not the same or are in a different order compared to the table definition\"\n      );\n    }\n    return new PgInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n  }\n}\nclass PgInsertBase extends QueryPromise {\n  constructor(table, values, session, dialect, withList, select, overridingSystemValue_) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, values, withList, select, overridingSystemValue_ };\n  }\n  static [entityKind] = \"PgInsert\";\n  config;\n  returning(fields = this.config.table[Table.Symbol.Columns]) {\n    this.config.returningFields = fields;\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /**\n   * Adds an `on conflict do nothing` clause to the query.\n   *\n   * Calling this method simply avoids inserting a row as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n   *\n   * @param config The `target` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Insert one row and cancel the insert if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing();\n   *\n   * // Explicitly specify conflict target\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing({ target: cars.id });\n   * ```\n   */\n  onConflictDoNothing(config = {}) {\n    if (config.target === void 0) {\n      this.config.onConflict = sql`do nothing`;\n    } else {\n      let targetColumn = \"\";\n      targetColumn = Array.isArray(config.target) ? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(\",\") : this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n      const whereSql = config.where ? sql` where ${config.where}` : void 0;\n      this.config.onConflict = sql`(${sql.raw(targetColumn)})${whereSql} do nothing`;\n    }\n    return this;\n  }\n  /**\n   * Adds an `on conflict do update` clause to the query.\n   *\n   * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n   *\n   * @param config The `target`, `set` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Update the row if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'Porsche' }\n   *   });\n   *\n   * // Upsert with 'where' clause\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'newBMW' },\n   *     targetWhere: sql`${cars.createdAt} > '2023-01-01'::date`,\n   *   });\n   * ```\n   */\n  onConflictDoUpdate(config) {\n    if (config.where && (config.targetWhere || config.setWhere)) {\n      throw new Error(\n        'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.'\n      );\n    }\n    const whereSql = config.where ? sql` where ${config.where}` : void 0;\n    const targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : void 0;\n    const setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : void 0;\n    const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n    let targetColumn = \"\";\n    targetColumn = Array.isArray(config.target) ? config.target.map((it) => this.dialect.escapeName(this.dialect.casing.getColumnCasing(it))).join(\",\") : this.dialect.escapeName(this.dialect.casing.getColumnCasing(config.target));\n    this.config.onConflict = sql`(${sql.raw(targetColumn)})${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildInsertQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(name) {\n    return tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n      return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n    });\n  }\n  prepare(name) {\n    return this._prepare(name);\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute = (placeholderValues) => {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      return this._prepare().execute(placeholderValues, this.authToken);\n    });\n  };\n  /** @internal */\n  getSelectedFields() {\n    return this.config.returningFields ? new Proxy(\n      this.config.returningFields,\n      new SelectionProxyHandler({\n        alias: getTableName(this.config.table),\n        sqlAliasedBehavior: \"alias\",\n        sqlBehavior: \"error\"\n      })\n    ) : void 0;\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  PgInsertBase,\n  PgInsertBuilder\n};\n//# sourceMappingURL=insert.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { tracer } from \"../../tracing.js\";\nclass PgRefreshMaterializedView extends QueryPromise {\n  constructor(view, session, dialect) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { view };\n  }\n  static [entityKind] = \"PgRefreshMaterializedView\";\n  config;\n  concurrently() {\n    if (this.config.withNoData !== void 0) {\n      throw new Error(\"Cannot use concurrently and withNoData together\");\n    }\n    this.config.concurrently = true;\n    return this;\n  }\n  withNoData() {\n    if (this.config.concurrently !== void 0) {\n      throw new Error(\"Cannot use concurrently and withNoData together\");\n    }\n    this.config.withNoData = true;\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildRefreshMaterializedViewQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(name) {\n    return tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n      return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), void 0, name, true);\n    });\n  }\n  prepare(name) {\n    return this._prepare(name);\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute = (placeholderValues) => {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      return this._prepare().execute(placeholderValues, this.authToken);\n    });\n  };\n}\nexport {\n  PgRefreshMaterializedView\n};\n//# sourceMappingURL=refresh-materialized-view.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { PgTable } from \"../table.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQL } from \"../../sql/sql.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { getTableName, Table } from \"../../table.js\";\nimport {\n  getTableLikeName,\n  mapUpdateSet,\n  orderSelectedFields\n} from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nclass PgUpdateBuilder {\n  constructor(table, session, dialect, withList) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n  }\n  static [entityKind] = \"PgUpdateBuilder\";\n  authToken;\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  set(values) {\n    return new PgUpdateBase(\n      this.table,\n      mapUpdateSet(this.table, values),\n      this.session,\n      this.dialect,\n      this.withList\n    ).setToken(this.authToken);\n  }\n}\nclass PgUpdateBase extends QueryPromise {\n  constructor(table, set, session, dialect, withList) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { set, table, withList, joins: [] };\n    this.tableName = getTableLikeName(table);\n    this.joinsNotNullableMap = typeof this.tableName === \"string\" ? { [this.tableName]: true } : {};\n  }\n  static [entityKind] = \"PgUpdate\";\n  config;\n  tableName;\n  joinsNotNullableMap;\n  from(source) {\n    const src = source;\n    const tableName = getTableLikeName(src);\n    if (typeof tableName === \"string\") {\n      this.joinsNotNullableMap[tableName] = true;\n    }\n    this.config.from = src;\n    return this;\n  }\n  getTableLikeFields(table) {\n    if (is(table, PgTable)) {\n      return table[Table.Symbol.Columns];\n    } else if (is(table, Subquery)) {\n      return table._.selectedFields;\n    }\n    return table[ViewBaseConfig].selectedFields;\n  }\n  createJoin(joinType) {\n    return (table, on) => {\n      const tableName = getTableLikeName(table);\n      if (typeof tableName === \"string\" && this.config.joins.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (typeof on === \"function\") {\n        const from = this.config.from && !is(this.config.from, SQL) ? this.getTableLikeFields(this.config.from) : void 0;\n        on = on(\n          new Proxy(\n            this.config.table[Table.Symbol.Columns],\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          ),\n          from && new Proxy(\n            from,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName });\n      if (typeof tableName === \"string\") {\n        switch (joinType) {\n          case \"left\": {\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n          case \"right\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"inner\": {\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"full\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n        }\n      }\n      return this;\n    };\n  }\n  leftJoin = this.createJoin(\"left\");\n  rightJoin = this.createJoin(\"right\");\n  innerJoin = this.createJoin(\"inner\");\n  fullJoin = this.createJoin(\"full\");\n  /**\n   * Adds a 'where' clause to the query.\n   *\n   * Calling this method will update only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param where the 'where' clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be updated.\n   *\n   * ```ts\n   * // Update all cars with green color\n   * await db.update(cars).set({ color: 'red' })\n   *   .where(eq(cars.color, 'green'));\n   * // or\n   * await db.update(cars).set({ color: 'red' })\n   *   .where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Update all BMW cars with a green color\n   * await db.update(cars).set({ color: 'red' })\n   *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Update all cars with the green or blue color\n   * await db.update(cars).set({ color: 'red' })\n   *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  returning(fields) {\n    if (!fields) {\n      fields = Object.assign({}, this.config.table[Table.Symbol.Columns]);\n      if (this.config.from) {\n        const tableName = getTableLikeName(this.config.from);\n        if (typeof tableName === \"string\" && this.config.from && !is(this.config.from, SQL)) {\n          const fromFields = this.getTableLikeFields(this.config.from);\n          fields[tableName] = fromFields;\n        }\n        for (const join of this.config.joins) {\n          const tableName2 = getTableLikeName(join.table);\n          if (typeof tableName2 === \"string\" && !is(join.table, SQL)) {\n            const fromFields = this.getTableLikeFields(join.table);\n            fields[tableName2] = fromFields;\n          }\n        }\n      }\n    }\n    this.config.returningFields = fields;\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildUpdateQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(name) {\n    const query = this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n    query.joinsNotNullableMap = this.joinsNotNullableMap;\n    return query;\n  }\n  prepare(name) {\n    return this._prepare(name);\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute = (placeholderValues) => {\n    return this._prepare().execute(placeholderValues, this.authToken);\n  };\n  /** @internal */\n  getSelectedFields() {\n    return this.config.returningFields ? new Proxy(\n      this.config.returningFields,\n      new SelectionProxyHandler({\n        alias: getTableName(this.config.table),\n        sqlAliasedBehavior: \"alias\",\n        sqlBehavior: \"error\"\n      })\n    ) : void 0;\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  PgUpdateBase,\n  PgUpdateBuilder\n};\n//# sourceMappingURL=update.js.map","import { entityKind } from \"../../entity.js\";\nimport { SQL, sql } from \"../../sql/sql.js\";\nclass PgCountBuilder extends SQL {\n  constructor(params) {\n    super(PgCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n    this.params = params;\n    this.mapWith(Number);\n    this.session = params.session;\n    this.sql = PgCountBuilder.buildCount(\n      params.source,\n      params.filters\n    );\n  }\n  sql;\n  token;\n  static [entityKind] = \"PgCountBuilder\";\n  [Symbol.toStringTag] = \"PgCountBuilder\";\n  session;\n  static buildEmbeddedCount(source, filters) {\n    return sql`(select count(*) from ${source}${sql.raw(\" where \").if(filters)}${filters})`;\n  }\n  static buildCount(source, filters) {\n    return sql`select count(*) as count from ${source}${sql.raw(\" where \").if(filters)}${filters};`;\n  }\n  /** @intrnal */\n  setToken(token) {\n    this.token = token;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return Promise.resolve(this.session.count(this.sql, this.token)).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n}\nexport {\n  PgCountBuilder\n};\n//# sourceMappingURL=count.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport {\n  mapRelationalRow\n} from \"../../relations.js\";\nimport { tracer } from \"../../tracing.js\";\nclass RelationalQueryBuilder {\n  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n  }\n  static [entityKind] = \"PgRelationalQueryBuilder\";\n  findMany(config) {\n    return new PgRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? config : {},\n      \"many\"\n    );\n  }\n  findFirst(config) {\n    return new PgRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? { ...config, limit: 1 } : { limit: 1 },\n      \"first\"\n    );\n  }\n}\nclass PgRelationalQuery extends QueryPromise {\n  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode) {\n    super();\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n    this.config = config;\n    this.mode = mode;\n  }\n  static [entityKind] = \"PgRelationalQuery\";\n  /** @internal */\n  _prepare(name) {\n    return tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n      const { query, builtQuery } = this._toSQL();\n      return this.session.prepareQuery(\n        builtQuery,\n        void 0,\n        name,\n        true,\n        (rawRows, mapColumnValue) => {\n          const rows = rawRows.map(\n            (row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n          );\n          if (this.mode === \"first\") {\n            return rows[0];\n          }\n          return rows;\n        }\n      );\n    });\n  }\n  prepare(name) {\n    return this._prepare(name);\n  }\n  _getQuery() {\n    return this.dialect.buildRelationalQueryWithoutPK({\n      fullSchema: this.fullSchema,\n      schema: this.schema,\n      tableNamesMap: this.tableNamesMap,\n      table: this.table,\n      tableConfig: this.tableConfig,\n      queryConfig: this.config,\n      tableAlias: this.tableConfig.tsName\n    });\n  }\n  /** @internal */\n  getSQL() {\n    return this._getQuery().sql;\n  }\n  _toSQL() {\n    const query = this._getQuery();\n    const builtQuery = this.dialect.sqlToQuery(query.sql);\n    return { query, builtQuery };\n  }\n  toSQL() {\n    return this._toSQL().builtQuery;\n  }\n  authToken;\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  execute() {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      return this._prepare().execute(void 0, this.authToken);\n    });\n  }\n}\nexport {\n  PgRelationalQuery,\n  RelationalQueryBuilder\n};\n//# sourceMappingURL=query.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nclass PgRaw extends QueryPromise {\n  constructor(execute, sql, query, mapBatchResult) {\n    super();\n    this.execute = execute;\n    this.sql = sql;\n    this.query = query;\n    this.mapBatchResult = mapBatchResult;\n  }\n  static [entityKind] = \"PgRaw\";\n  /** @internal */\n  getSQL() {\n    return this.sql;\n  }\n  getQuery() {\n    return this.query;\n  }\n  mapResult(result, isFromBatch) {\n    return isFromBatch ? this.mapBatchResult(result) : result;\n  }\n  _prepare() {\n    return this;\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return false;\n  }\n}\nexport {\n  PgRaw\n};\n//# sourceMappingURL=raw.js.map","import { entityKind } from \"../entity.js\";\nimport {\n  PgDeleteBase,\n  PgInsertBuilder,\n  PgSelectBuilder,\n  PgUpdateBuilder,\n  QueryBuilder\n} from \"./query-builders/index.js\";\nimport { SelectionProxyHandler } from \"../selection-proxy.js\";\nimport { sql } from \"../sql/sql.js\";\nimport { WithSubquery } from \"../subquery.js\";\nimport { PgCountBuilder } from \"./query-builders/count.js\";\nimport { RelationalQueryBuilder } from \"./query-builders/query.js\";\nimport { PgRaw } from \"./query-builders/raw.js\";\nimport { PgRefreshMaterializedView } from \"./query-builders/refresh-materialized-view.js\";\nclass PgDatabase {\n  constructor(dialect, session, schema) {\n    this.dialect = dialect;\n    this.session = session;\n    this._ = schema ? {\n      schema: schema.schema,\n      fullSchema: schema.fullSchema,\n      tableNamesMap: schema.tableNamesMap,\n      session\n    } : {\n      schema: void 0,\n      fullSchema: {},\n      tableNamesMap: {},\n      session\n    };\n    this.query = {};\n    if (this._.schema) {\n      for (const [tableName, columns] of Object.entries(this._.schema)) {\n        this.query[tableName] = new RelationalQueryBuilder(\n          schema.fullSchema,\n          this._.schema,\n          this._.tableNamesMap,\n          schema.fullSchema[tableName],\n          columns,\n          dialect,\n          session\n        );\n      }\n    }\n  }\n  static [entityKind] = \"PgDatabase\";\n  query;\n  /**\n   * Creates a subquery that defines a temporary named result set as a CTE.\n   *\n   * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param alias The alias for the subquery.\n   *\n   * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n   *\n   * @example\n   *\n   * ```ts\n   * // Create a subquery with alias 'sq' and use it in the select query\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   *\n   * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n   *\n   * ```ts\n   * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n   * const sq = db.$with('sq').as(db.select({\n   *   name: sql<string>`upper(${users.name})`.as('name'),\n   * })\n   * .from(users));\n   *\n   * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n   * ```\n   */\n  $with = (alias, selection) => {\n    const self = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(new QueryBuilder(self.dialect));\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  $count(source, filters) {\n    return new PgCountBuilder({ source, filters, session: this.session });\n  }\n  /**\n   * Incorporates a previously defined CTE (using `$with`) into the main query.\n   *\n   * This method allows the main query to reference a temporary named result set.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param queries The CTEs to incorporate into the main query.\n   *\n   * @example\n   *\n   * ```ts\n   * // Define a subquery 'sq' as a CTE using $with\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * // Incorporate the CTE 'sq' into the main query and select from it\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   */\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries,\n        distinct: true\n      });\n    }\n    function selectDistinctOn(on, fields) {\n      return new PgSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries,\n        distinct: { on }\n      });\n    }\n    function update(table) {\n      return new PgUpdateBuilder(table, self.session, self.dialect, queries);\n    }\n    function insert(table) {\n      return new PgInsertBuilder(table, self.session, self.dialect, queries);\n    }\n    function delete_(table) {\n      return new PgDeleteBase(table, self.session, self.dialect, queries);\n    }\n    return { select, selectDistinct, selectDistinctOn, update, insert, delete: delete_ };\n  }\n  select(fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: this.session,\n      dialect: this.dialect\n    });\n  }\n  selectDistinct(fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: this.session,\n      dialect: this.dialect,\n      distinct: true\n    });\n  }\n  selectDistinctOn(on, fields) {\n    return new PgSelectBuilder({\n      fields: fields ?? void 0,\n      session: this.session,\n      dialect: this.dialect,\n      distinct: { on }\n    });\n  }\n  /**\n   * Creates an update query.\n   *\n   * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n   *\n   * Use `.set()` method to specify which values to update.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param table The table to update.\n   *\n   * @example\n   *\n   * ```ts\n   * // Update all rows in the 'cars' table\n   * await db.update(cars).set({ color: 'red' });\n   *\n   * // Update rows with filters and conditions\n   * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n   *\n   * // Update with returning clause\n   * const updatedCar: Car[] = await db.update(cars)\n   *   .set({ color: 'red' })\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  update(table) {\n    return new PgUpdateBuilder(table, this.session, this.dialect);\n  }\n  /**\n   * Creates an insert query.\n   *\n   * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert}\n   *\n   * @param table The table to insert into.\n   *\n   * @example\n   *\n   * ```ts\n   * // Insert one row\n   * await db.insert(cars).values({ brand: 'BMW' });\n   *\n   * // Insert multiple rows\n   * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n   *\n   * // Insert with returning clause\n   * const insertedCar: Car[] = await db.insert(cars)\n   *   .values({ brand: 'BMW' })\n   *   .returning();\n   * ```\n   */\n  insert(table) {\n    return new PgInsertBuilder(table, this.session, this.dialect);\n  }\n  /**\n   * Creates a delete query.\n   *\n   * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param table The table to delete from.\n   *\n   * @example\n   *\n   * ```ts\n   * // Delete all rows in the 'cars' table\n   * await db.delete(cars);\n   *\n   * // Delete rows with filters and conditions\n   * await db.delete(cars).where(eq(cars.color, 'green'));\n   *\n   * // Delete with returning clause\n   * const deletedCar: Car[] = await db.delete(cars)\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  delete(table) {\n    return new PgDeleteBase(table, this.session, this.dialect);\n  }\n  refreshMaterializedView(view) {\n    return new PgRefreshMaterializedView(view, this.session, this.dialect);\n  }\n  authToken;\n  execute(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    const builtQuery = this.dialect.sqlToQuery(sequel);\n    const prepared = this.session.prepareQuery(\n      builtQuery,\n      void 0,\n      void 0,\n      false\n    );\n    return new PgRaw(\n      () => prepared.execute(void 0, this.authToken),\n      sequel,\n      builtQuery,\n      (result) => prepared.mapResult(result, true)\n    );\n  }\n  transaction(transaction, config) {\n    return this.session.transaction(transaction, config);\n  }\n}\nconst withReplicas = (primary, replicas, getReplica = () => replicas[Math.floor(Math.random() * replicas.length)]) => {\n  const select = (...args) => getReplica(replicas).select(...args);\n  const selectDistinct = (...args) => getReplica(replicas).selectDistinct(...args);\n  const selectDistinctOn = (...args) => getReplica(replicas).selectDistinctOn(...args);\n  const $count = (...args) => getReplica(replicas).$count(...args);\n  const _with = (...args) => getReplica(replicas).with(...args);\n  const $with = (arg) => getReplica(replicas).$with(arg);\n  const update = (...args) => primary.update(...args);\n  const insert = (...args) => primary.insert(...args);\n  const $delete = (...args) => primary.delete(...args);\n  const execute = (...args) => primary.execute(...args);\n  const transaction = (...args) => primary.transaction(...args);\n  const refreshMaterializedView = (...args) => primary.refreshMaterializedView(...args);\n  return {\n    ...primary,\n    update,\n    insert,\n    delete: $delete,\n    execute,\n    transaction,\n    refreshMaterializedView,\n    $primary: primary,\n    select,\n    selectDistinct,\n    selectDistinctOn,\n    $count,\n    $with,\n    with: _with,\n    get query() {\n      return getReplica(replicas).query;\n    }\n  };\n};\nexport {\n  PgDatabase,\n  withReplicas\n};\n//# sourceMappingURL=db.js.map","import { entityKind } from \"../entity.js\";\nimport { TransactionRollbackError } from \"../errors.js\";\nimport { sql } from \"../sql/index.js\";\nimport { tracer } from \"../tracing.js\";\nimport { PgDatabase } from \"./db.js\";\nclass PgPreparedQuery {\n  constructor(query) {\n    this.query = query;\n  }\n  authToken;\n  getQuery() {\n    return this.query;\n  }\n  mapResult(response, _isFromBatch) {\n    return response;\n  }\n  /** @internal */\n  setToken(token) {\n    this.authToken = token;\n    return this;\n  }\n  static [entityKind] = \"PgPreparedQuery\";\n  /** @internal */\n  joinsNotNullableMap;\n}\nclass PgSession {\n  constructor(dialect) {\n    this.dialect = dialect;\n  }\n  static [entityKind] = \"PgSession\";\n  /** @internal */\n  execute(query, token) {\n    return tracer.startActiveSpan(\"drizzle.operation\", () => {\n      const prepared = tracer.startActiveSpan(\"drizzle.prepareQuery\", () => {\n        return this.prepareQuery(\n          this.dialect.sqlToQuery(query),\n          void 0,\n          void 0,\n          false\n        );\n      });\n      return prepared.setToken(token).execute(void 0, token);\n    });\n  }\n  all(query) {\n    return this.prepareQuery(\n      this.dialect.sqlToQuery(query),\n      void 0,\n      void 0,\n      false\n    ).all();\n  }\n  /** @internal */\n  async count(sql2, token) {\n    const res = await this.execute(sql2, token);\n    return Number(\n      res[0][\"count\"]\n    );\n  }\n}\nclass PgTransaction extends PgDatabase {\n  constructor(dialect, session, schema, nestedIndex = 0) {\n    super(dialect, session, schema);\n    this.schema = schema;\n    this.nestedIndex = nestedIndex;\n  }\n  static [entityKind] = \"PgTransaction\";\n  rollback() {\n    throw new TransactionRollbackError();\n  }\n  /** @internal */\n  getTransactionConfigSQL(config) {\n    const chunks = [];\n    if (config.isolationLevel) {\n      chunks.push(`isolation level ${config.isolationLevel}`);\n    }\n    if (config.accessMode) {\n      chunks.push(config.accessMode);\n    }\n    if (typeof config.deferrable === \"boolean\") {\n      chunks.push(config.deferrable ? \"deferrable\" : \"not deferrable\");\n    }\n    return sql.raw(chunks.join(\" \"));\n  }\n  setTransaction(config) {\n    return this.session.execute(sql`set transaction ${this.getTransactionConfigSQL(config)}`);\n  }\n}\nexport {\n  PgPreparedQuery,\n  PgSession,\n  PgTransaction\n};\n//# sourceMappingURL=session.js.map","import { entityKind } from \"../entity.js\";\nimport { NoopLogger } from \"../logger.js\";\nimport { PgTransaction } from \"../pg-core/index.js\";\nimport { PgPreparedQuery, PgSession } from \"../pg-core/session.js\";\nimport { fillPlaceholders } from \"../sql/sql.js\";\nimport { tracer } from \"../tracing.js\";\nimport { mapResultRow } from \"../utils.js\";\nclass PostgresJsPreparedQuery extends PgPreparedQuery {\n  constructor(client, queryString, params, logger, fields, _isResponseInArrayMode, customResultMapper) {\n    super({ sql: queryString, params });\n    this.client = client;\n    this.queryString = queryString;\n    this.params = params;\n    this.logger = logger;\n    this.fields = fields;\n    this._isResponseInArrayMode = _isResponseInArrayMode;\n    this.customResultMapper = customResultMapper;\n  }\n  static [entityKind] = \"PostgresJsPreparedQuery\";\n  async execute(placeholderValues = {}) {\n    return tracer.startActiveSpan(\"drizzle.execute\", async (span) => {\n      const params = fillPlaceholders(this.params, placeholderValues);\n      span?.setAttributes({\n        \"drizzle.query.text\": this.queryString,\n        \"drizzle.query.params\": JSON.stringify(params)\n      });\n      this.logger.logQuery(this.queryString, params);\n      const { fields, queryString: query, client, joinsNotNullableMap, customResultMapper } = this;\n      if (!fields && !customResultMapper) {\n        return tracer.startActiveSpan(\"drizzle.driver.execute\", () => {\n          return client.unsafe(query, params);\n        });\n      }\n      const rows = await tracer.startActiveSpan(\"drizzle.driver.execute\", () => {\n        span?.setAttributes({\n          \"drizzle.query.text\": query,\n          \"drizzle.query.params\": JSON.stringify(params)\n        });\n        return client.unsafe(query, params).values();\n      });\n      return tracer.startActiveSpan(\"drizzle.mapResponse\", () => {\n        return customResultMapper ? customResultMapper(rows) : rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));\n      });\n    });\n  }\n  all(placeholderValues = {}) {\n    return tracer.startActiveSpan(\"drizzle.execute\", async (span) => {\n      const params = fillPlaceholders(this.params, placeholderValues);\n      span?.setAttributes({\n        \"drizzle.query.text\": this.queryString,\n        \"drizzle.query.params\": JSON.stringify(params)\n      });\n      this.logger.logQuery(this.queryString, params);\n      return tracer.startActiveSpan(\"drizzle.driver.execute\", () => {\n        span?.setAttributes({\n          \"drizzle.query.text\": this.queryString,\n          \"drizzle.query.params\": JSON.stringify(params)\n        });\n        return this.client.unsafe(this.queryString, params);\n      });\n    });\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return this._isResponseInArrayMode;\n  }\n}\nclass PostgresJsSession extends PgSession {\n  constructor(client, dialect, schema, options = {}) {\n    super(dialect);\n    this.client = client;\n    this.schema = schema;\n    this.options = options;\n    this.logger = options.logger ?? new NoopLogger();\n  }\n  static [entityKind] = \"PostgresJsSession\";\n  logger;\n  prepareQuery(query, fields, name, isResponseInArrayMode, customResultMapper) {\n    return new PostgresJsPreparedQuery(\n      this.client,\n      query.sql,\n      query.params,\n      this.logger,\n      fields,\n      isResponseInArrayMode,\n      customResultMapper\n    );\n  }\n  query(query, params) {\n    this.logger.logQuery(query, params);\n    return this.client.unsafe(query, params).values();\n  }\n  queryObjects(query, params) {\n    return this.client.unsafe(query, params);\n  }\n  transaction(transaction, config) {\n    return this.client.begin(async (client) => {\n      const session = new PostgresJsSession(\n        client,\n        this.dialect,\n        this.schema,\n        this.options\n      );\n      const tx = new PostgresJsTransaction(this.dialect, session, this.schema);\n      if (config) {\n        await tx.setTransaction(config);\n      }\n      return transaction(tx);\n    });\n  }\n}\nclass PostgresJsTransaction extends PgTransaction {\n  constructor(dialect, session, schema, nestedIndex = 0) {\n    super(dialect, session, schema, nestedIndex);\n    this.session = session;\n  }\n  static [entityKind] = \"PostgresJsTransaction\";\n  transaction(transaction) {\n    return this.session.client.savepoint((client) => {\n      const session = new PostgresJsSession(\n        client,\n        this.dialect,\n        this.schema,\n        this.session.options\n      );\n      const tx = new PostgresJsTransaction(this.dialect, session, this.schema);\n      return transaction(tx);\n    });\n  }\n}\nexport {\n  PostgresJsPreparedQuery,\n  PostgresJsSession,\n  PostgresJsTransaction\n};\n//# sourceMappingURL=session.js.map","import pgClient from \"postgres\";\nimport { entityKind } from \"../entity.js\";\nimport { DefaultLogger } from \"../logger.js\";\nimport { PgDatabase } from \"../pg-core/db.js\";\nimport { PgDialect } from \"../pg-core/dialect.js\";\nimport {\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig\n} from \"../relations.js\";\nimport { isConfig } from \"../utils.js\";\nimport { PostgresJsSession } from \"./session.js\";\nclass PostgresJsDatabase extends PgDatabase {\n  static [entityKind] = \"PostgresJsDatabase\";\n}\nfunction construct(client, config = {}) {\n  const transparentParser = (val) => val;\n  for (const type of [\"1184\", \"1082\", \"1083\", \"1114\", \"1182\", \"1185\", \"1115\", \"1231\"]) {\n    client.options.parsers[type] = transparentParser;\n    client.options.serializers[type] = transparentParser;\n  }\n  client.options.serializers[\"114\"] = transparentParser;\n  client.options.serializers[\"3802\"] = transparentParser;\n  const dialect = new PgDialect({ casing: config.casing });\n  let logger;\n  if (config.logger === true) {\n    logger = new DefaultLogger();\n  } else if (config.logger !== false) {\n    logger = config.logger;\n  }\n  let schema;\n  if (config.schema) {\n    const tablesConfig = extractTablesRelationalConfig(\n      config.schema,\n      createTableRelationsHelpers\n    );\n    schema = {\n      fullSchema: config.schema,\n      schema: tablesConfig.tables,\n      tableNamesMap: tablesConfig.tableNamesMap\n    };\n  }\n  const session = new PostgresJsSession(client, dialect, schema, { logger });\n  const db = new PostgresJsDatabase(dialect, session, schema);\n  db.$client = client;\n  return db;\n}\nfunction drizzle(...params) {\n  if (typeof params[0] === \"string\") {\n    const instance = pgClient(params[0]);\n    return construct(instance, params[1]);\n  }\n  if (isConfig(params[0])) {\n    const { connection, client, ...drizzleConfig } = params[0];\n    if (client)\n      return construct(client, drizzleConfig);\n    if (typeof connection === \"object\" && connection.url !== void 0) {\n      const { url, ...config } = connection;\n      const instance2 = pgClient(url, config);\n      return construct(instance2, drizzleConfig);\n    }\n    const instance = pgClient(connection);\n    return construct(instance, drizzleConfig);\n  }\n  return construct(params[0], params[1]);\n}\n((drizzle2) => {\n  function mock(config) {\n    return construct({\n      options: {\n        parsers: {},\n        serializers: {}\n      }\n    }, config);\n  }\n  drizzle2.mock = mock;\n})(drizzle || (drizzle = {}));\nexport {\n  PostgresJsDatabase,\n  drizzle\n};\n//# sourceMappingURL=driver.js.map","// src/index.ts\nfunction defineConfig(config) {\n  return config;\n}\nexport {\n  defineConfig\n};\n","import { config } from \"dotenv\";\nimport { z } from \"@zod/mini\";\n\nlet env_file = \".env.example\";\n\nswitch (process.env?.NODE_ENV) {\n  case \"production\":\n    env_file = \".env.production\";\n    break;\n  case \"development\":\n    env_file = \".env.development\";\n    break;\n  case \"test\":\n    env_file = \".env.test\";\n    break;\n  default:\n    env_file = \".env.development\";\n}\n\nconfig({\n  path: env_file,\n});\n\nconst SCHEMA_ENV = z.object({\n  NODE_ENV: z._default(\n    z.enum([\"development\", \"production\", \"test\"]),\n    \"development\",\n  ),\n  PORT: z.coerce.number(),\n  API_URL: z.string(),\n  DATABASE_PASSWORD: z.string(),\n  DATABASE: z.string(),\n  DATABASE_HOST: z.string(),\n  DATABASE_TENANT: z.optional(z.string()),\n  DATABASE_PORT: z.coerce.number(),\n  DATABASE_USER: z.string(),\n});\n\ntype ENV_TYPE = z.infer<typeof SCHEMA_ENV>;\n\nconst parsed = SCHEMA_ENV.safeParse(process.env);\n\nif (!parsed.success) {\n  console.error(\"❌ Invalid ENV vars:\", JSON.stringify(parsed.error, null, 2));\n  process.exit(1);\n}\n\nexport const parsed_env: ENV_TYPE = parsed.data;\n","import { defineConfig } from \"drizzle-kit\";\n\nimport { parsed_env } from \"@/parsed_env\";\n\nexport const db_credentials = {\n  host: parsed_env.DATABASE_HOST,\n  port: parsed_env.DATABASE_PORT,\n  database: parsed_env.DATABASE,\n  user: `${parsed_env.DATABASE_USER}${parsed_env?.DATABASE_TENANT ? \".\" + parsed_env.DATABASE_TENANT : \"\"}`,\n  password: parsed_env.DATABASE_PASSWORD,\n};\n\nconsole.log(db_credentials);\n\nconst drizzle_config = defineConfig({\n  out: \"./drizzle\",\n  dialect: \"postgresql\",\n  schema: \"./src/db/schema.ts\",\n  dbCredentials: db_credentials,\n});\n\nconsole.log(JSON.stringify(drizzle_config));\n\nexport default drizzle_config;\n","import { drizzle as drizzle_postgres } from \"drizzle-orm/postgres-js\";\nimport { db_credentials } from '~/drizzle.config'\n\nexport function create_db() {\n  return drizzle_postgres(\n    `postgresql://${db_credentials.user}:${db_credentials.password}@${db_credentials.host}:${db_credentials.port}/${db_credentials.database}`\n  );\n}\n","import { pgTable, serial, text, integer } from \"drizzle-orm/pg-core\";\nimport { z } from \"@zod/mini\";\n\nexport const items = pgTable(\"items\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  price: integer(\"price\").notNull(),\n});\n\nexport const S_ITEM = z.object({\n  id: z.coerce.number().check(z.int(), z.minimum(1)),\n  name: z.string().check(z.minLength(1)),\n  price: z.coerce.number().check(z.int(), z.positive()),\n});\n\nexport type T_ITEM = z.infer<typeof S_ITEM>;\n","\nexport type wrapped<T> =\n  | {\n    value: T,\n    error: null,\n    raw_throw: null,\n  }\n  | {\n    value: null,\n    error: Error,\n    raw_throw: unknown,\n  }\n\nexport async function async_unwrap<T>(promise: Promise<T>): Promise<wrapped<T>> {\n  try {\n    const result = await promise\n\n    return {\n      value: result,\n      error: null,\n      raw_throw: null,\n    }\n  }\n  catch (maybe_error) {\n\n    const error =\n      maybe_error instanceof Error ? maybe_error : new Error(String(maybe_error));\n\n    return {\n      value: null,\n      error: error,\n      raw_throw: maybe_error,\n    }\n  }\n}\n\nexport function unwrap<T>(protected_call: () => T): wrapped<T> {\n  try {\n    const result = protected_call()\n    return {\n      value: result,\n      error: null,\n      raw_throw: null,\n    }\n  }\n  catch (maybe_error) {\n    const error =\n      maybe_error instanceof Error ? maybe_error : new Error(String(maybe_error));\n\n    return {\n      value: null,\n      error: error,\n      raw_throw: maybe_error,\n    }\n  }\n}\n\n","import Hapi, { Server } from \"@hapi/hapi\";\nimport { create_db } from \"./db\";\nimport { items, T_ITEM } from \"./db/schema\";\nimport { eq } from \"drizzle-orm\";\n\nimport { async_unwrap } from \"@/lib/wrapped\";\nimport { minLength, z } from \"@zod/mini\";\nimport { S_ITEM } from \"./db/schema\";\n\nimport {\n  internal as boom_internal,\n  notFound as boom_not_found,\n} from \"@hapi/boom\";\n\nconst S_ITEM_ID = z.coerce\n  .number()\n  .check(\n    z.int('Field \"id\" must be integer'),\n    z.positive('Field \"id\" cannot be negative'),\n  );\nconst S_ITEM_PRICE = z.coerce\n  .number('Field \"price\" is required')\n  .check(\n    z.int('Field \"price\" must be integer'),\n    z.positive('Field \"price\" cannot be negative'),\n  );\nconst S_ITEM_NAME = z.string().check(minLength(1));\n\nconst db = create_db();\n\nconst validation_fail_action: Hapi.Lifecycle.FailAction = async (\n  request,\n  h,\n  err,\n) => {\n  const details = (err as Error).cause as {};\n\n  return h.response(details).code(400).takeover();\n};\n\nexport const define_routes = (server: Server) => {\n  server.route({\n    method: \"GET\",\n    path: \"/ping\",\n    handler: async () => {\n      return {\n        ok: true,\n      };\n    },\n  });\n\n  server.route({\n    method: \"GET\",\n    path: \"/items\",\n    options: {\n      response: {\n        schema: z.array(S_ITEM),\n        failAction: \"error\",\n      },\n    },\n    handler: async (request, h) => {\n      const { error, value } = await async_unwrap(\n        db.select().from(items).orderBy(items.id),\n      );\n\n      if (error) {\n        return boom_internal(error);\n      }\n\n      if (!value) {\n        return boom_not_found(\"Item not found\");\n      }\n\n      if (value) {\n        return h.response(value);\n      }\n    },\n  });\n\n  server.route({\n    method: \"GET\",\n    path: \"/items/{id}\",\n    options: {\n      validate: {\n        params: z.object({ id: S_ITEM_ID }),\n        failAction: validation_fail_action,\n      },\n      response: {\n        schema: S_ITEM,\n        failAction: \"error\",\n      },\n    },\n    handler: async (request, h) => {\n      const { id } = request.params;\n      const { error, value } = await async_unwrap(\n        db\n          .select()\n          .from(items)\n          .where(eq(items.id, Number(id)))\n          .limit(1)\n          .then((rows) => rows[0]),\n      );\n\n      if (error) {\n        return boom_internal(error);\n      }\n\n      if (!value) {\n        return boom_not_found(\"Item not found\");\n      }\n\n      if (value) {\n        return h.response(value);\n      }\n    },\n  });\n\n  // Define the /items route to create a new item\n  server.route({\n    method: \"POST\",\n    path: \"/items\",\n    options: {\n      validate: {\n        payload: z.object({\n          price: S_ITEM_PRICE,\n          name: S_ITEM_NAME,\n        }),\n        failAction: validation_fail_action,\n      },\n      response: {\n        schema: S_ITEM,\n      },\n    },\n    handler: async (request, h) => {\n      const { value, error } = await async_unwrap(\n        db\n          .insert(items)\n          .values(request.payload as T_ITEM)\n          .returning(),\n      );\n\n      if (error) {\n        console.log(JSON.stringify(error));\n        boom_internal(error);\n      }\n\n      if (value) {\n        return h.response(value?.pop()).code(201);\n      }\n    },\n  });\n\n  // Define the /items/{id} route to update an existing item partially\n  server.route({\n    method: \"PUT\",\n    path: \"/items/{id}\",\n    options: {\n      validate: {\n        params: z.object({ id: S_ITEM_ID }),\n        payload: z.object({\n          name: z.optional(S_ITEM_NAME),\n          price: z.optional(S_ITEM_PRICE),\n        }),\n        failAction: validation_fail_action,\n      },\n      response: {\n        schema: S_ITEM,\n        failAction: \"error\",\n      },\n    },\n    handler: async (request, h) => {\n      const { id } = request.params;\n\n      const { value, error } = await async_unwrap(\n        db\n          .update(items)\n          .set(request.payload as T_ITEM)\n          .where(eq(items.id, Number(id)))\n          .returning(),\n      );\n\n      if (error) {\n        boom_internal(error);\n      }\n\n      if (value) {\n        return h.response(value?.pop()).code(200);\n      }\n    },\n  });\n\n  // Define the /items/{id} route to delete an item\n  server.route({\n    method: \"DELETE\",\n    path: \"/items/{id}\",\n    options: {\n      validate: {\n        params: z.object({\n          id: S_ITEM_ID,\n        }),\n        failAction: validation_fail_action,\n      },\n    },\n    handler: async (request, h) => {\n      const { id } = request.params;\n\n      const { value, error } = await async_unwrap(\n        db\n          .delete(items)\n          .where(eq(items.id, Number(id)))\n          .returning(),\n      );\n\n      if (error) {\n        return boom_internal(error);\n      }\n\n      console.log(\"PRE CHECK\");\n\n      if (value.length === 0) {\n        return boom_not_found(\"Item not found\");\n      }\n\n      if (value.length > 0) {\n        return h.response().code(204);\n      }\n    },\n  });\n};\n","import { ZodError } from \"zod\";\n\nexport function format_zod_error(\n  error: ZodError,\n): { field: string; message: string }[] {\n  const issues = [];\n\n  console.log(JSON.stringify(error));\n\n  for (const issue of error.issues) {\n    if (issue.code === \"invalid_union\" && \"unionErrors\" in issue) {\n      for (const unionError of issue.unionErrors) {\n        issues.push(...unionError.issues);\n      }\n    } else {\n      issues.push(issue);\n    }\n  }\n\n  return issues.map((issue) => ({\n    field: issue.path.join(\".\") || \"unknown\",\n    message: issue.message,\n  }));\n}\n","import { ServerValidator, Validator } from \"@hapi/hapi\";\nimport {\n  Boom,\n  badData as boom_bad_data,\n  badRequest as boom_bad_request,\n} from \"@hapi/boom\";\n\nimport { z, ZodMiniType } from \"@zod/mini\";\nimport { format_zod_error } from \"@/lib/format_zod_error\";\n\nexport const zod_adapter: ServerValidator = {\n  compile: <A>(schema: z.ZodMiniType<unknown, A>) => {\n    return zod_validator<A>(schema);\n  },\n};\n\nexport const zod_validator: <A>(\n  schema: ZodMiniType<unknown, A>,\n  boom?: Boom<unknown>,\n) => Validator<A> = (schema, boom) => async (value, _) => {\n  const { data: parsed_data, error: parse_error } = schema.safeParse(value);\n\n  if (parse_error) {\n    console.log(parse_error);\n\n    const formatted_zod_error = format_zod_error(parse_error);\n\n    throw new Error(undefined, { cause: formatted_zod_error });\n  }\n\n  return parsed_data;\n};\n","import * as Hapi from \"@hapi/hapi\";\nimport { define_routes } from \"./routes\";\nimport { zod_adapter } from \"./plugins/zod-validator\";\nimport { parsed_env } from \"./parsed_env\";\n\nlet server: Hapi.Server;\n\nexport const initializeServer = async () => {\n  if (server) {\n    return server;\n  }\n\n  server = Hapi.server({\n    host: parsed_env.API_URL,\n    port: parsed_env.PORT,\n  });\n\n  server.validator(zod_adapter);\n\n  define_routes(server);\n\n  await server.initialize();\n  await server.start();\n\n  return server;\n};\n","import { Server } from \"@hapi/hapi\";\nimport { initializeServer } from \"./server\";\nimport { parsed_env } from \"./parsed_env\";\n\nasync function init_hapi() {\n  let server: Server;\n\n  process.on(\"unhandledRejection\", (err) => {\n    console.error(err);\n    process.exit(1);\n  });\n\n  process.on(\"SIGTERM\", async () => {\n    console.log(\"SIGTERM received: stopping Hapi server...\");\n    await server.stop({ timeout: 5000 });\n    process.exit(0);\n  });\n\n  server = await initializeServer();\n  console.log(`HAPI running on ${parsed_env.API_URL}:${parsed_env.PORT}`);\n}\n\ninit_hapi();\n"],"names":["drizzle_postgres","boom_internal","boom_not_found","eq"],"mappings":"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ACvD,YAAY;AACZ;AACA;AACA;AACA,MAAM,OAAO,IAAI;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;AACnD,EAAE,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;AACjC,IAAI,OAAO,CAAC,cAAc,KAAK;AAC/B,MAAM,MAAM,WAAW,GAAG,OAAO,cAAc,KAAK,UAAU,GAAG,cAAc,CAAC,iBAAiB,EAAE,CAAC,GAAG,cAAc;AACrH,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,WAAW,CAAC,iBAAiB,EAAE,CAAC,EAAE;AACpF,QAAQ,MAAM,IAAI,KAAK;AACvB,UAAU;AACV,SAAS;AACT;AACA,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;AACjE,MAAM,OAAO,IAAI;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC;AACpD;AACA,EAAE,eAAe,CAAC,YAAY,EAAE;AAChC,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;AAClD,IAAI,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,CAAC,KAAK,EAAE;AACf,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;AACrC,MAAM,KAAK,GAAG,KAAK;AACnB,QAAQ,IAAI,KAAK;AACjB,UAAU,IAAI,CAAC,MAAM,CAAC,MAAM;AAC5B,UAAU,IAAI,qBAAqB,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]}